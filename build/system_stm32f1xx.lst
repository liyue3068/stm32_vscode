ARM GAS  /tmp/ccJVItxn.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"system_stm32f1xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	SystemCoreClock
  16              		.section	.data.SystemCoreClock,"aw"
  17              		.align	2
  20              	SystemCoreClock:
  21 0000 00A24A04 		.word	72000000
  22              		.global	AHBPrescTable
  23              		.section	.rodata.AHBPrescTable,"a"
  24              		.align	2
  27              	AHBPrescTable:
  28 0000 00       		.byte	0
  29 0001 00       		.byte	0
  30 0002 00       		.byte	0
  31 0003 00       		.byte	0
  32 0004 00       		.byte	0
  33 0005 00       		.byte	0
  34 0006 00       		.byte	0
  35 0007 00       		.byte	0
  36 0008 01       		.byte	1
  37 0009 02       		.byte	2
  38 000a 03       		.byte	3
  39 000b 04       		.byte	4
  40 000c 06       		.byte	6
  41 000d 07       		.byte	7
  42 000e 08       		.byte	8
  43 000f 09       		.byte	9
  44              		.global	APBPrescTable
  45              		.section	.rodata.APBPrescTable,"a"
  46              		.align	2
  49              	APBPrescTable:
  50 0000 00       		.byte	0
  51 0001 00       		.byte	0
  52 0002 00       		.byte	0
  53 0003 00       		.byte	0
  54 0004 01       		.byte	1
  55 0005 02       		.byte	2
  56 0006 03       		.byte	3
  57 0007 04       		.byte	4
  58              		.section	.text.SystemInit,"ax",%progbits
  59              		.align	1
  60              		.global	SystemInit
  61              		.arch armv7-m
  62              		.syntax unified
  63              		.thumb
ARM GAS  /tmp/ccJVItxn.s 			page 2


  64              		.thumb_func
  65              		.fpu softvfp
  67              	SystemInit:
  68              	.LFB66:
  69              		.file 1 "Core/Src/system_stm32f1xx.c"
   1:Core/Src/system_stm32f1xx.c **** /**
   2:Core/Src/system_stm32f1xx.c ****   ******************************************************************************
   3:Core/Src/system_stm32f1xx.c ****   * @file    system_stm32f1xx.c
   4:Core/Src/system_stm32f1xx.c ****   * @author  MCD Application Team
   5:Core/Src/system_stm32f1xx.c ****   * @version V4.2.0
   6:Core/Src/system_stm32f1xx.c ****   * @date    31-March-2017
   7:Core/Src/system_stm32f1xx.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:Core/Src/system_stm32f1xx.c ****   * 
   9:Core/Src/system_stm32f1xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  10:Core/Src/system_stm32f1xx.c ****   *     user application:
  11:Core/Src/system_stm32f1xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  12:Core/Src/system_stm32f1xx.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  13:Core/Src/system_stm32f1xx.c ****   *                      This function is called at startup just after reset and 
  14:Core/Src/system_stm32f1xx.c ****   *                      before branch to main program. This call is made inside
  15:Core/Src/system_stm32f1xx.c ****   *                      the "startup_stm32f1xx_xx.s" file.
  16:Core/Src/system_stm32f1xx.c ****   *
  17:Core/Src/system_stm32f1xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  18:Core/Src/system_stm32f1xx.c ****   *                                  by the user application to setup the SysTick 
  19:Core/Src/system_stm32f1xx.c ****   *                                  timer or configure other parameters.
  20:Core/Src/system_stm32f1xx.c ****   *                                     
  21:Core/Src/system_stm32f1xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  22:Core/Src/system_stm32f1xx.c ****   *                                 be called whenever the core clock is changed
  23:Core/Src/system_stm32f1xx.c ****   *                                 during program execution.
  24:Core/Src/system_stm32f1xx.c ****   *
  25:Core/Src/system_stm32f1xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  26:Core/Src/system_stm32f1xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f1xx_xx.s" file, to
  27:Core/Src/system_stm32f1xx.c ****   *    configure the system clock before to branch to main program.
  28:Core/Src/system_stm32f1xx.c ****   *
  29:Core/Src/system_stm32f1xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depending on
  30:Core/Src/system_stm32f1xx.c ****   *    the product used), refer to "HSE_VALUE". 
  31:Core/Src/system_stm32f1xx.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  32:Core/Src/system_stm32f1xx.c ****   *    are using different crystal you have to adapt the HSE value to your own
  33:Core/Src/system_stm32f1xx.c ****   *    configuration.
  34:Core/Src/system_stm32f1xx.c ****   *        
  35:Core/Src/system_stm32f1xx.c ****   ******************************************************************************
  36:Core/Src/system_stm32f1xx.c ****   * @attention
  37:Core/Src/system_stm32f1xx.c ****   *
  38:Core/Src/system_stm32f1xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  39:Core/Src/system_stm32f1xx.c ****   *
  40:Core/Src/system_stm32f1xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  41:Core/Src/system_stm32f1xx.c ****   * are permitted provided that the following conditions are met:
  42:Core/Src/system_stm32f1xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  43:Core/Src/system_stm32f1xx.c ****   *      this list of conditions and the following disclaimer.
  44:Core/Src/system_stm32f1xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  45:Core/Src/system_stm32f1xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  46:Core/Src/system_stm32f1xx.c ****   *      and/or other materials provided with the distribution.
  47:Core/Src/system_stm32f1xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  48:Core/Src/system_stm32f1xx.c ****   *      may be used to endorse or promote products derived from this software
  49:Core/Src/system_stm32f1xx.c ****   *      without specific prior written permission.
  50:Core/Src/system_stm32f1xx.c ****   *
  51:Core/Src/system_stm32f1xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  52:Core/Src/system_stm32f1xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  /tmp/ccJVItxn.s 			page 3


  53:Core/Src/system_stm32f1xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  54:Core/Src/system_stm32f1xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  55:Core/Src/system_stm32f1xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  56:Core/Src/system_stm32f1xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  57:Core/Src/system_stm32f1xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  58:Core/Src/system_stm32f1xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  59:Core/Src/system_stm32f1xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  60:Core/Src/system_stm32f1xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  61:Core/Src/system_stm32f1xx.c ****   *
  62:Core/Src/system_stm32f1xx.c ****   ******************************************************************************
  63:Core/Src/system_stm32f1xx.c ****   */
  64:Core/Src/system_stm32f1xx.c **** 
  65:Core/Src/system_stm32f1xx.c **** /** @addtogroup CMSIS
  66:Core/Src/system_stm32f1xx.c ****   * @{
  67:Core/Src/system_stm32f1xx.c ****   */
  68:Core/Src/system_stm32f1xx.c **** 
  69:Core/Src/system_stm32f1xx.c **** /** @addtogroup stm32f1xx_system
  70:Core/Src/system_stm32f1xx.c ****   * @{
  71:Core/Src/system_stm32f1xx.c ****   */  
  72:Core/Src/system_stm32f1xx.c ****   
  73:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Includes
  74:Core/Src/system_stm32f1xx.c ****   * @{
  75:Core/Src/system_stm32f1xx.c ****   */
  76:Core/Src/system_stm32f1xx.c **** 
  77:Core/Src/system_stm32f1xx.c **** #include "stm32f1xx.h"
  78:Core/Src/system_stm32f1xx.c **** 
  79:Core/Src/system_stm32f1xx.c **** /**
  80:Core/Src/system_stm32f1xx.c ****   * @}
  81:Core/Src/system_stm32f1xx.c ****   */
  82:Core/Src/system_stm32f1xx.c **** 
  83:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_TypesDefinitions
  84:Core/Src/system_stm32f1xx.c ****   * @{
  85:Core/Src/system_stm32f1xx.c ****   */
  86:Core/Src/system_stm32f1xx.c **** 
  87:Core/Src/system_stm32f1xx.c **** /**
  88:Core/Src/system_stm32f1xx.c ****   * @}
  89:Core/Src/system_stm32f1xx.c ****   */
  90:Core/Src/system_stm32f1xx.c **** 
  91:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Defines
  92:Core/Src/system_stm32f1xx.c ****   * @{
  93:Core/Src/system_stm32f1xx.c ****   */
  94:Core/Src/system_stm32f1xx.c **** 
  95:Core/Src/system_stm32f1xx.c **** #if !defined  (HSE_VALUE) 
  96:Core/Src/system_stm32f1xx.c ****   #define HSE_VALUE               8000000U /*!< Default value of the External oscillator in Hz.
  97:Core/Src/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
  98:Core/Src/system_stm32f1xx.c **** #endif /* HSE_VALUE */
  99:Core/Src/system_stm32f1xx.c **** 
 100:Core/Src/system_stm32f1xx.c **** #if !defined  (HSI_VALUE)
 101:Core/Src/system_stm32f1xx.c ****   #define HSI_VALUE               8000000U /*!< Default value of the Internal oscillator in Hz.
 102:Core/Src/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
 103:Core/Src/system_stm32f1xx.c **** #endif /* HSI_VALUE */
 104:Core/Src/system_stm32f1xx.c **** 
 105:Core/Src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to use external SRAM  */ 
 106:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 107:Core/Src/system_stm32f1xx.c **** /* #define DATA_IN_ExtSRAM */
 108:Core/Src/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
 109:Core/Src/system_stm32f1xx.c **** 
ARM GAS  /tmp/ccJVItxn.s 			page 4


 110:Core/Src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 111:Core/Src/system_stm32f1xx.c ****      Internal SRAM. */ 
 112:Core/Src/system_stm32f1xx.c **** /* #define VECT_TAB_SRAM */
 113:Core/Src/system_stm32f1xx.c **** #define VECT_TAB_OFFSET  0x00000000U /*!< Vector Table base offset field. 
 114:Core/Src/system_stm32f1xx.c ****                                   This value must be a multiple of 0x200. */
 115:Core/Src/system_stm32f1xx.c **** 
 116:Core/Src/system_stm32f1xx.c **** 
 117:Core/Src/system_stm32f1xx.c **** /**
 118:Core/Src/system_stm32f1xx.c ****   * @}
 119:Core/Src/system_stm32f1xx.c ****   */
 120:Core/Src/system_stm32f1xx.c **** 
 121:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Macros
 122:Core/Src/system_stm32f1xx.c ****   * @{
 123:Core/Src/system_stm32f1xx.c ****   */
 124:Core/Src/system_stm32f1xx.c **** 
 125:Core/Src/system_stm32f1xx.c **** /**
 126:Core/Src/system_stm32f1xx.c ****   * @}
 127:Core/Src/system_stm32f1xx.c ****   */
 128:Core/Src/system_stm32f1xx.c **** 
 129:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Variables
 130:Core/Src/system_stm32f1xx.c ****   * @{
 131:Core/Src/system_stm32f1xx.c ****   */
 132:Core/Src/system_stm32f1xx.c **** 
 133:Core/Src/system_stm32f1xx.c **** /*******************************************************************************
 134:Core/Src/system_stm32f1xx.c **** *  Clock Definitions
 135:Core/Src/system_stm32f1xx.c **** *******************************************************************************/
 136:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xB) ||defined(STM32F100xE)
 137:Core/Src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = 24000000U;        /*!< System Clock Frequency (Core Clock) */
 138:Core/Src/system_stm32f1xx.c **** #else /*!< HSI Selected as System Clock source */
 139:Core/Src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = 72000000U;        /*!< System Clock Frequency (Core Clock) */
 140:Core/Src/system_stm32f1xx.c **** #endif
 141:Core/Src/system_stm32f1xx.c **** 
 142:Core/Src/system_stm32f1xx.c **** const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 143:Core/Src/system_stm32f1xx.c **** const uint8_t APBPrescTable[8U] =  {0, 0, 0, 0, 1, 2, 3, 4};
 144:Core/Src/system_stm32f1xx.c **** 
 145:Core/Src/system_stm32f1xx.c **** /**
 146:Core/Src/system_stm32f1xx.c ****   * @}
 147:Core/Src/system_stm32f1xx.c ****   */
 148:Core/Src/system_stm32f1xx.c **** 
 149:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_FunctionPrototypes
 150:Core/Src/system_stm32f1xx.c ****   * @{
 151:Core/Src/system_stm32f1xx.c ****   */
 152:Core/Src/system_stm32f1xx.c **** 
 153:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 154:Core/Src/system_stm32f1xx.c **** #ifdef DATA_IN_ExtSRAM
 155:Core/Src/system_stm32f1xx.c ****   static void SystemInit_ExtMemCtl(void); 
 156:Core/Src/system_stm32f1xx.c **** #endif /* DATA_IN_ExtSRAM */
 157:Core/Src/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
 158:Core/Src/system_stm32f1xx.c **** 
 159:Core/Src/system_stm32f1xx.c **** /**
 160:Core/Src/system_stm32f1xx.c ****   * @}
 161:Core/Src/system_stm32f1xx.c ****   */
 162:Core/Src/system_stm32f1xx.c **** 
 163:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Functions
 164:Core/Src/system_stm32f1xx.c ****   * @{
 165:Core/Src/system_stm32f1xx.c ****   */
 166:Core/Src/system_stm32f1xx.c **** 
ARM GAS  /tmp/ccJVItxn.s 			page 5


 167:Core/Src/system_stm32f1xx.c **** /**
 168:Core/Src/system_stm32f1xx.c ****   * @brief  Setup the microcontroller system
 169:Core/Src/system_stm32f1xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 170:Core/Src/system_stm32f1xx.c ****   *         SystemCoreClock variable.
 171:Core/Src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 172:Core/Src/system_stm32f1xx.c ****   * @param  None
 173:Core/Src/system_stm32f1xx.c ****   * @retval None
 174:Core/Src/system_stm32f1xx.c ****   */
 175:Core/Src/system_stm32f1xx.c **** void SystemInit (void)
 176:Core/Src/system_stm32f1xx.c **** {
  70              		.loc 1 176 1
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 1, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75 0000 80B4     		push	{r7}
  76              	.LCFI0:
  77              		.cfi_def_cfa_offset 4
  78              		.cfi_offset 7, -4
  79 0002 00AF     		add	r7, sp, #0
  80              	.LCFI1:
  81              		.cfi_def_cfa_register 7
 177:Core/Src/system_stm32f1xx.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 178:Core/Src/system_stm32f1xx.c ****   /* Set HSION bit */
 179:Core/Src/system_stm32f1xx.c ****   RCC->CR |= 0x00000001U;
  82              		.loc 1 179 11
  83 0004 154B     		ldr	r3, .L2
  84 0006 1B68     		ldr	r3, [r3]
  85 0008 144A     		ldr	r2, .L2
  86 000a 43F00103 		orr	r3, r3, #1
  87 000e 1360     		str	r3, [r2]
 180:Core/Src/system_stm32f1xx.c **** 
 181:Core/Src/system_stm32f1xx.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 182:Core/Src/system_stm32f1xx.c **** #if !defined(STM32F105xC) && !defined(STM32F107xC)
 183:Core/Src/system_stm32f1xx.c ****   RCC->CFGR &= 0xF8FF0000U;
  88              		.loc 1 183 13
  89 0010 124B     		ldr	r3, .L2
  90 0012 5A68     		ldr	r2, [r3, #4]
  91 0014 1149     		ldr	r1, .L2
  92 0016 124B     		ldr	r3, .L2+4
  93 0018 1340     		ands	r3, r3, r2
  94 001a 4B60     		str	r3, [r1, #4]
 184:Core/Src/system_stm32f1xx.c **** #else
 185:Core/Src/system_stm32f1xx.c ****   RCC->CFGR &= 0xF0FF0000U;
 186:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */   
 187:Core/Src/system_stm32f1xx.c ****   
 188:Core/Src/system_stm32f1xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 189:Core/Src/system_stm32f1xx.c ****   RCC->CR &= 0xFEF6FFFFU;
  95              		.loc 1 189 11
  96 001c 0F4B     		ldr	r3, .L2
  97 001e 1B68     		ldr	r3, [r3]
  98 0020 0E4A     		ldr	r2, .L2
  99 0022 23F08473 		bic	r3, r3, #17301504
 100 0026 23F48033 		bic	r3, r3, #65536
 101 002a 1360     		str	r3, [r2]
 190:Core/Src/system_stm32f1xx.c **** 
 191:Core/Src/system_stm32f1xx.c ****   /* Reset HSEBYP bit */
ARM GAS  /tmp/ccJVItxn.s 			page 6


 192:Core/Src/system_stm32f1xx.c ****   RCC->CR &= 0xFFFBFFFFU;
 102              		.loc 1 192 11
 103 002c 0B4B     		ldr	r3, .L2
 104 002e 1B68     		ldr	r3, [r3]
 105 0030 0A4A     		ldr	r2, .L2
 106 0032 23F48023 		bic	r3, r3, #262144
 107 0036 1360     		str	r3, [r2]
 193:Core/Src/system_stm32f1xx.c **** 
 194:Core/Src/system_stm32f1xx.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 195:Core/Src/system_stm32f1xx.c ****   RCC->CFGR &= 0xFF80FFFFU;
 108              		.loc 1 195 13
 109 0038 084B     		ldr	r3, .L2
 110 003a 5B68     		ldr	r3, [r3, #4]
 111 003c 074A     		ldr	r2, .L2
 112 003e 23F4FE03 		bic	r3, r3, #8323072
 113 0042 5360     		str	r3, [r2, #4]
 196:Core/Src/system_stm32f1xx.c **** 
 197:Core/Src/system_stm32f1xx.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 198:Core/Src/system_stm32f1xx.c ****   /* Reset PLL2ON and PLL3ON bits */
 199:Core/Src/system_stm32f1xx.c ****   RCC->CR &= 0xEBFFFFFFU;
 200:Core/Src/system_stm32f1xx.c **** 
 201:Core/Src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 202:Core/Src/system_stm32f1xx.c ****   RCC->CIR = 0x00FF0000U;
 203:Core/Src/system_stm32f1xx.c **** 
 204:Core/Src/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 205:Core/Src/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000U;
 206:Core/Src/system_stm32f1xx.c **** #elif defined(STM32F100xB) || defined(STM32F100xE)
 207:Core/Src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 208:Core/Src/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000U;
 209:Core/Src/system_stm32f1xx.c **** 
 210:Core/Src/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 211:Core/Src/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000U;      
 212:Core/Src/system_stm32f1xx.c **** #else
 213:Core/Src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 214:Core/Src/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000U;
 114              		.loc 1 214 6
 115 0044 054B     		ldr	r3, .L2
 116              		.loc 1 214 12
 117 0046 4FF41F02 		mov	r2, #10420224
 118 004a 9A60     		str	r2, [r3, #8]
 215:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */
 216:Core/Src/system_stm32f1xx.c ****     
 217:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 218:Core/Src/system_stm32f1xx.c ****   #ifdef DATA_IN_ExtSRAM
 219:Core/Src/system_stm32f1xx.c ****     SystemInit_ExtMemCtl(); 
 220:Core/Src/system_stm32f1xx.c ****   #endif /* DATA_IN_ExtSRAM */
 221:Core/Src/system_stm32f1xx.c **** #endif 
 222:Core/Src/system_stm32f1xx.c **** 
 223:Core/Src/system_stm32f1xx.c **** #ifdef VECT_TAB_SRAM
 224:Core/Src/system_stm32f1xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 225:Core/Src/system_stm32f1xx.c **** #else
 226:Core/Src/system_stm32f1xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 119              		.loc 1 226 6
 120 004c 054B     		ldr	r3, .L2+8
 121              		.loc 1 226 13
 122 004e 4FF00062 		mov	r2, #134217728
 123 0052 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccJVItxn.s 			page 7


 227:Core/Src/system_stm32f1xx.c **** #endif 
 228:Core/Src/system_stm32f1xx.c **** }
 124              		.loc 1 228 1
 125 0054 00BF     		nop
 126 0056 BD46     		mov	sp, r7
 127              	.LCFI2:
 128              		.cfi_def_cfa_register 13
 129              		@ sp needed
 130 0058 80BC     		pop	{r7}
 131              	.LCFI3:
 132              		.cfi_restore 7
 133              		.cfi_def_cfa_offset 0
 134 005a 7047     		bx	lr
 135              	.L3:
 136              		.align	2
 137              	.L2:
 138 005c 00100240 		.word	1073876992
 139 0060 0000FFF8 		.word	-117506048
 140 0064 00ED00E0 		.word	-536810240
 141              		.cfi_endproc
 142              	.LFE66:
 144              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 145              		.align	1
 146              		.global	SystemCoreClockUpdate
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu softvfp
 152              	SystemCoreClockUpdate:
 153              	.LFB67:
 229:Core/Src/system_stm32f1xx.c **** 
 230:Core/Src/system_stm32f1xx.c **** /**
 231:Core/Src/system_stm32f1xx.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 232:Core/Src/system_stm32f1xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 233:Core/Src/system_stm32f1xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 234:Core/Src/system_stm32f1xx.c ****   *         other parameters.
 235:Core/Src/system_stm32f1xx.c ****   *           
 236:Core/Src/system_stm32f1xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 237:Core/Src/system_stm32f1xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 238:Core/Src/system_stm32f1xx.c ****   *         based on this variable will be incorrect.         
 239:Core/Src/system_stm32f1xx.c ****   *     
 240:Core/Src/system_stm32f1xx.c ****   * @note   - The system frequency computed by this function is not the real 
 241:Core/Src/system_stm32f1xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 242:Core/Src/system_stm32f1xx.c ****   *           constant and the selected clock source:
 243:Core/Src/system_stm32f1xx.c ****   *             
 244:Core/Src/system_stm32f1xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 245:Core/Src/system_stm32f1xx.c ****   *                                              
 246:Core/Src/system_stm32f1xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 247:Core/Src/system_stm32f1xx.c ****   *                          
 248:Core/Src/system_stm32f1xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 249:Core/Src/system_stm32f1xx.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 250:Core/Src/system_stm32f1xx.c ****   *         
 251:Core/Src/system_stm32f1xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 252:Core/Src/system_stm32f1xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 253:Core/Src/system_stm32f1xx.c ****   *             in voltage and temperature.   
 254:Core/Src/system_stm32f1xx.c ****   *    
 255:Core/Src/system_stm32f1xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
ARM GAS  /tmp/ccJVItxn.s 			page 8


 256:Core/Src/system_stm32f1xx.c ****   *              8 MHz or 25 MHz, depending on the product used), user has to ensure
 257:Core/Src/system_stm32f1xx.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 258:Core/Src/system_stm32f1xx.c ****   *              Otherwise, this function may have wrong result.
 259:Core/Src/system_stm32f1xx.c ****   *                
 260:Core/Src/system_stm32f1xx.c ****   *         - The result of this function could be not correct when using fractional
 261:Core/Src/system_stm32f1xx.c ****   *           value for HSE crystal.
 262:Core/Src/system_stm32f1xx.c ****   * @param  None
 263:Core/Src/system_stm32f1xx.c ****   * @retval None
 264:Core/Src/system_stm32f1xx.c ****   */
 265:Core/Src/system_stm32f1xx.c **** void SystemCoreClockUpdate (void)
 266:Core/Src/system_stm32f1xx.c **** {
 154              		.loc 1 266 1
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 16
 157              		@ frame_needed = 1, uses_anonymous_args = 0
 158              		@ link register save eliminated.
 159 0000 80B4     		push	{r7}
 160              	.LCFI4:
 161              		.cfi_def_cfa_offset 4
 162              		.cfi_offset 7, -4
 163 0002 85B0     		sub	sp, sp, #20
 164              	.LCFI5:
 165              		.cfi_def_cfa_offset 24
 166 0004 00AF     		add	r7, sp, #0
 167              	.LCFI6:
 168              		.cfi_def_cfa_register 7
 267:Core/Src/system_stm32f1xx.c ****   uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 169              		.loc 1 267 12
 170 0006 0023     		movs	r3, #0
 171 0008 FB60     		str	r3, [r7, #12]
 172              		.loc 1 267 22
 173 000a 0023     		movs	r3, #0
 174 000c BB60     		str	r3, [r7, #8]
 175              		.loc 1 267 36
 176 000e 0023     		movs	r3, #0
 177 0010 7B60     		str	r3, [r7, #4]
 268:Core/Src/system_stm32f1xx.c **** 
 269:Core/Src/system_stm32f1xx.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 270:Core/Src/system_stm32f1xx.c ****   uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
 271:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */
 272:Core/Src/system_stm32f1xx.c **** 
 273:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xB) || defined(STM32F100xE)
 274:Core/Src/system_stm32f1xx.c ****   uint32_t prediv1factor = 0U;
 275:Core/Src/system_stm32f1xx.c **** #endif /* STM32F100xB or STM32F100xE */
 276:Core/Src/system_stm32f1xx.c ****     
 277:Core/Src/system_stm32f1xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 278:Core/Src/system_stm32f1xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 178              		.loc 1 278 12
 179 0012 2D4B     		ldr	r3, .L12
 180 0014 5B68     		ldr	r3, [r3, #4]
 181              		.loc 1 278 7
 182 0016 03F00C03 		and	r3, r3, #12
 183 001a FB60     		str	r3, [r7, #12]
 279:Core/Src/system_stm32f1xx.c ****   
 280:Core/Src/system_stm32f1xx.c ****   switch (tmp)
 184              		.loc 1 280 3
 185 001c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccJVItxn.s 			page 9


 186 001e 042B     		cmp	r3, #4
 187 0020 09D0     		beq	.L5
 188 0022 FB68     		ldr	r3, [r7, #12]
 189 0024 082B     		cmp	r3, #8
 190 0026 0AD0     		beq	.L6
 191 0028 FB68     		ldr	r3, [r7, #12]
 192 002a 002B     		cmp	r3, #0
 193 002c 33D1     		bne	.L7
 281:Core/Src/system_stm32f1xx.c ****   {
 282:Core/Src/system_stm32f1xx.c ****     case 0x00U:  /* HSI used as system clock */
 283:Core/Src/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
 194              		.loc 1 283 23
 195 002e 274B     		ldr	r3, .L12+4
 196 0030 274A     		ldr	r2, .L12+8
 197 0032 1A60     		str	r2, [r3]
 284:Core/Src/system_stm32f1xx.c ****       break;
 198              		.loc 1 284 7
 199 0034 33E0     		b	.L8
 200              	.L5:
 285:Core/Src/system_stm32f1xx.c ****     case 0x04U:  /* HSE used as system clock */
 286:Core/Src/system_stm32f1xx.c ****       SystemCoreClock = HSE_VALUE;
 201              		.loc 1 286 23
 202 0036 254B     		ldr	r3, .L12+4
 203 0038 254A     		ldr	r2, .L12+8
 204 003a 1A60     		str	r2, [r3]
 287:Core/Src/system_stm32f1xx.c ****       break;
 205              		.loc 1 287 7
 206 003c 2FE0     		b	.L8
 207              	.L6:
 288:Core/Src/system_stm32f1xx.c ****     case 0x08U:  /* PLL used as system clock */
 289:Core/Src/system_stm32f1xx.c **** 
 290:Core/Src/system_stm32f1xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 291:Core/Src/system_stm32f1xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 208              		.loc 1 291 20
 209 003e 224B     		ldr	r3, .L12
 210 0040 5B68     		ldr	r3, [r3, #4]
 211              		.loc 1 291 15
 212 0042 03F47013 		and	r3, r3, #3932160
 213 0046 BB60     		str	r3, [r7, #8]
 292:Core/Src/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 214              		.loc 1 292 22
 215 0048 1F4B     		ldr	r3, .L12
 216 004a 5B68     		ldr	r3, [r3, #4]
 217              		.loc 1 292 17
 218 004c 03F48033 		and	r3, r3, #65536
 219 0050 7B60     		str	r3, [r7, #4]
 293:Core/Src/system_stm32f1xx.c ****       
 294:Core/Src/system_stm32f1xx.c **** #if !defined(STM32F105xC) && !defined(STM32F107xC)      
 295:Core/Src/system_stm32f1xx.c ****       pllmull = ( pllmull >> 18U) + 2U;
 220              		.loc 1 295 27
 221 0052 BB68     		ldr	r3, [r7, #8]
 222 0054 9B0C     		lsrs	r3, r3, #18
 223              		.loc 1 295 15
 224 0056 0233     		adds	r3, r3, #2
 225 0058 BB60     		str	r3, [r7, #8]
 296:Core/Src/system_stm32f1xx.c ****       
 297:Core/Src/system_stm32f1xx.c ****       if (pllsource == 0x00U)
ARM GAS  /tmp/ccJVItxn.s 			page 10


 226              		.loc 1 297 10
 227 005a 7B68     		ldr	r3, [r7, #4]
 228 005c 002B     		cmp	r3, #0
 229 005e 06D1     		bne	.L9
 298:Core/Src/system_stm32f1xx.c ****       {
 299:Core/Src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 300:Core/Src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 230              		.loc 1 300 45
 231 0060 BB68     		ldr	r3, [r7, #8]
 232 0062 1C4A     		ldr	r2, .L12+12
 233 0064 02FB03F3 		mul	r3, r2, r3
 234              		.loc 1 300 25
 235 0068 184A     		ldr	r2, .L12+4
 236 006a 1360     		str	r3, [r2]
 301:Core/Src/system_stm32f1xx.c ****       }
 302:Core/Src/system_stm32f1xx.c ****       else
 303:Core/Src/system_stm32f1xx.c ****       {
 304:Core/Src/system_stm32f1xx.c ****  #if defined(STM32F100xB) || defined(STM32F100xE)
 305:Core/Src/system_stm32f1xx.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 306:Core/Src/system_stm32f1xx.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 307:Core/Src/system_stm32f1xx.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 308:Core/Src/system_stm32f1xx.c ****  #else
 309:Core/Src/system_stm32f1xx.c ****         /* HSE selected as PLL clock entry */
 310:Core/Src/system_stm32f1xx.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 311:Core/Src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 312:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 313:Core/Src/system_stm32f1xx.c ****         }
 314:Core/Src/system_stm32f1xx.c ****         else
 315:Core/Src/system_stm32f1xx.c ****         {
 316:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 317:Core/Src/system_stm32f1xx.c ****         }
 318:Core/Src/system_stm32f1xx.c ****  #endif
 319:Core/Src/system_stm32f1xx.c ****       }
 320:Core/Src/system_stm32f1xx.c **** #else
 321:Core/Src/system_stm32f1xx.c ****       pllmull = pllmull >> 18U;
 322:Core/Src/system_stm32f1xx.c ****       
 323:Core/Src/system_stm32f1xx.c ****       if (pllmull != 0x0DU)
 324:Core/Src/system_stm32f1xx.c ****       {
 325:Core/Src/system_stm32f1xx.c ****          pllmull += 2U;
 326:Core/Src/system_stm32f1xx.c ****       }
 327:Core/Src/system_stm32f1xx.c ****       else
 328:Core/Src/system_stm32f1xx.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 329:Core/Src/system_stm32f1xx.c ****         pllmull = 13U / 2U; 
 330:Core/Src/system_stm32f1xx.c ****       }
 331:Core/Src/system_stm32f1xx.c ****             
 332:Core/Src/system_stm32f1xx.c ****       if (pllsource == 0x00U)
 333:Core/Src/system_stm32f1xx.c ****       {
 334:Core/Src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 335:Core/Src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 336:Core/Src/system_stm32f1xx.c ****       }
 337:Core/Src/system_stm32f1xx.c ****       else
 338:Core/Src/system_stm32f1xx.c ****       {/* PREDIV1 selected as PLL clock entry */
 339:Core/Src/system_stm32f1xx.c ****         
 340:Core/Src/system_stm32f1xx.c ****         /* Get PREDIV1 clock source and division factor */
 341:Core/Src/system_stm32f1xx.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 342:Core/Src/system_stm32f1xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 343:Core/Src/system_stm32f1xx.c ****         
ARM GAS  /tmp/ccJVItxn.s 			page 11


 344:Core/Src/system_stm32f1xx.c ****         if (prediv1source == 0U)
 345:Core/Src/system_stm32f1xx.c ****         { 
 346:Core/Src/system_stm32f1xx.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 347:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 348:Core/Src/system_stm32f1xx.c ****         }
 349:Core/Src/system_stm32f1xx.c ****         else
 350:Core/Src/system_stm32f1xx.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 351:Core/Src/system_stm32f1xx.c ****           
 352:Core/Src/system_stm32f1xx.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 353:Core/Src/system_stm32f1xx.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 354:Core/Src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 355:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 356:Core/Src/system_stm32f1xx.c ****         }
 357:Core/Src/system_stm32f1xx.c ****       }
 358:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */ 
 359:Core/Src/system_stm32f1xx.c ****       break;
 237              		.loc 1 359 7
 238 006c 17E0     		b	.L8
 239              	.L9:
 310:Core/Src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 240              		.loc 1 310 17
 241 006e 164B     		ldr	r3, .L12
 242 0070 5B68     		ldr	r3, [r3, #4]
 310:Core/Src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 243              		.loc 1 310 24
 244 0072 03F40033 		and	r3, r3, #131072
 310:Core/Src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 245              		.loc 1 310 12
 246 0076 002B     		cmp	r3, #0
 247 0078 06D0     		beq	.L11
 312:Core/Src/system_stm32f1xx.c ****         }
 248              		.loc 1 312 47
 249 007a BB68     		ldr	r3, [r7, #8]
 250 007c 154A     		ldr	r2, .L12+12
 251 007e 02FB03F3 		mul	r3, r2, r3
 312:Core/Src/system_stm32f1xx.c ****         }
 252              		.loc 1 312 27
 253 0082 124A     		ldr	r2, .L12+4
 254 0084 1360     		str	r3, [r2]
 255              		.loc 1 359 7
 256 0086 0AE0     		b	.L8
 257              	.L11:
 316:Core/Src/system_stm32f1xx.c ****         }
 258              		.loc 1 316 39
 259 0088 BB68     		ldr	r3, [r7, #8]
 260 008a 114A     		ldr	r2, .L12+8
 261 008c 02FB03F3 		mul	r3, r2, r3
 316:Core/Src/system_stm32f1xx.c ****         }
 262              		.loc 1 316 27
 263 0090 0E4A     		ldr	r2, .L12+4
 264 0092 1360     		str	r3, [r2]
 265              		.loc 1 359 7
 266 0094 03E0     		b	.L8
 267              	.L7:
 360:Core/Src/system_stm32f1xx.c **** 
 361:Core/Src/system_stm32f1xx.c ****     default:
 362:Core/Src/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
ARM GAS  /tmp/ccJVItxn.s 			page 12


 268              		.loc 1 362 23
 269 0096 0D4B     		ldr	r3, .L12+4
 270 0098 0D4A     		ldr	r2, .L12+8
 271 009a 1A60     		str	r2, [r3]
 363:Core/Src/system_stm32f1xx.c ****       break;
 272              		.loc 1 363 7
 273 009c 00BF     		nop
 274              	.L8:
 364:Core/Src/system_stm32f1xx.c ****   }
 365:Core/Src/system_stm32f1xx.c ****   
 366:Core/Src/system_stm32f1xx.c ****   /* Compute HCLK clock frequency ----------------*/
 367:Core/Src/system_stm32f1xx.c ****   /* Get HCLK prescaler */
 368:Core/Src/system_stm32f1xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 275              		.loc 1 368 28
 276 009e 0A4B     		ldr	r3, .L12
 277 00a0 5B68     		ldr	r3, [r3, #4]
 278              		.loc 1 368 52
 279 00a2 1B09     		lsrs	r3, r3, #4
 280 00a4 03F00F03 		and	r3, r3, #15
 281              		.loc 1 368 22
 282 00a8 0B4A     		ldr	r2, .L12+16
 283 00aa D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 284              		.loc 1 368 7
 285 00ac FB60     		str	r3, [r7, #12]
 369:Core/Src/system_stm32f1xx.c ****   /* HCLK clock frequency */
 370:Core/Src/system_stm32f1xx.c ****   SystemCoreClock >>= tmp;  
 286              		.loc 1 370 19
 287 00ae 074B     		ldr	r3, .L12+4
 288 00b0 1A68     		ldr	r2, [r3]
 289 00b2 FB68     		ldr	r3, [r7, #12]
 290 00b4 22FA03F3 		lsr	r3, r2, r3
 291 00b8 044A     		ldr	r2, .L12+4
 292 00ba 1360     		str	r3, [r2]
 371:Core/Src/system_stm32f1xx.c **** }
 293              		.loc 1 371 1
 294 00bc 00BF     		nop
 295 00be 1437     		adds	r7, r7, #20
 296              	.LCFI7:
 297              		.cfi_def_cfa_offset 4
 298 00c0 BD46     		mov	sp, r7
 299              	.LCFI8:
 300              		.cfi_def_cfa_register 13
 301              		@ sp needed
 302 00c2 80BC     		pop	{r7}
 303              	.LCFI9:
 304              		.cfi_restore 7
 305              		.cfi_def_cfa_offset 0
 306 00c4 7047     		bx	lr
 307              	.L13:
 308 00c6 00BF     		.align	2
 309              	.L12:
 310 00c8 00100240 		.word	1073876992
 311 00cc 00000000 		.word	SystemCoreClock
 312 00d0 00127A00 		.word	8000000
 313 00d4 00093D00 		.word	4000000
 314 00d8 00000000 		.word	AHBPrescTable
 315              		.cfi_endproc
ARM GAS  /tmp/ccJVItxn.s 			page 13


 316              	.LFE67:
 318              		.text
 319              	.Letext0:
 320              		.file 2 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine/_default_types.h"
 321              		.file 3 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_stdint.h"
 322              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 323              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 324              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 325              		.file 7 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/lock.h"
 326              		.file 8 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_types.h"
 327              		.file 9 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/include/stddef.h"
 328              		.file 10 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/reent.h"
 329              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 330              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccJVItxn.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f1xx.c
     /tmp/ccJVItxn.s:20     .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccJVItxn.s:17     .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccJVItxn.s:27     .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccJVItxn.s:24     .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccJVItxn.s:49     .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccJVItxn.s:46     .rodata.APBPrescTable:0000000000000000 $d
     /tmp/ccJVItxn.s:59     .text.SystemInit:0000000000000000 $t
     /tmp/ccJVItxn.s:67     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccJVItxn.s:138    .text.SystemInit:000000000000005c $d
     /tmp/ccJVItxn.s:145    .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccJVItxn.s:152    .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccJVItxn.s:310    .text.SystemCoreClockUpdate:00000000000000c8 $d

NO UNDEFINED SYMBOLS
