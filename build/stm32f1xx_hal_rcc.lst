ARM GAS  /tmp/ccQKe6VG.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_RCC_DeInit
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_RCC_DeInit:
  25              	.LFB66:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @file    stm32f1xx_hal_rcc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                       ##### RCC specific features #####
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled, 
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       and all peripherals are off except internal SRAM, Flash and JTAG.
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) buses;
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           all peripherals mapped on these buses are running at HSI speed.
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] Once the device started from reset, the user application has to:
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the AHB and APB buses prescalers
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals whose clocks are not
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS) 
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccQKe6VG.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                       ##### RCC Limitations #####
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write 
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       from/to registers.
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]  
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       Workarounds:
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @attention
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      without specific prior written permission.
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************  
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** */
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #include "stm32f1xx_hal.h"
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @addtogroup STM32F1xx_HAL_Driver
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC RCC
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** * @brief RCC HAL module driver
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccQKe6VG.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Constants RCC Private Constants
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  * @{
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  */
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_CLK_ENABLE()     __HAL_RCC_GPIOA_CLK_ENABLE()
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay);
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Exported functions --------------------------------------------------------*/
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions 
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions 
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim    
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB, APB1
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       and APB2).
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly or through
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           the PLL as System clock source.
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) LSI (low-speed internal), ~40 KHz low consumption RC used as IWDG and/or RTC
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           clock source.
ARM GAS  /tmp/ccQKe6VG.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) HSE (high-speed external), 4 to 24 MHz (STM32F100xx) or 4 to 16 MHz (STM32F101x/STM32F102
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring different output clocks:
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 72 MHz for STM
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz)
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           clock source), the System clocks automatically switched to HSI and an interrupt
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           is generated if enabled. The interrupt is linked to the Cortex-M3 NMI 
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (Non-Maskable Interrupt) exception vector.
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output SYSCLK, HSI,
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           HSE or PLL clock (divided by 2) on PA8 pin + PLL2CLK, PLL3CLK/2, PLL3CLK and XTI for STM3
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] System, AHB and APB buses clocks configuration
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           HSE and PLL.
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           from AHB clock through configurable prescalers and used to clock
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           the peripherals mapped on these buses. You can use
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           "@ref HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) RTC: RTC clock can be derived either from the LSI, LSE or HSE clock
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****               divided by 128. 
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) USB OTG FS and RTC: USB OTG FS require a frequency equal to 48 MHz
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****               to work correctly. This clock is derived of the main PLL through PLL Multiplier.
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) I2S interface on STM32F105x/STM32F107x can be derived from PLL3CLK
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) IWDG clock which is always the LSI clock.
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) For STM32F10xxx, the maximum frequency of the SYSCLK and HCLK/PCLK2 is 72 MHz, PCLK1 36 M
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           For STM32F100xx, the maximum frequency of the SYSCLK and HCLK/PCLK1/PCLK2 is 24 MHz.  
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           Depending on the SYSCLK frequency, the flash latency should be adapted accordingly.
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /*
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   Additional consideration on the SYSCLK based on Latency settings:
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         | Latency       | SYSCLK clock frequency (MHz)  |
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |0WS(1CPU cycle)|       0 < SYSCLK <= 24        |
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |1WS(2CPU cycle)|      24 < SYSCLK <= 48        |
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |2WS(3CPU cycle)|      48 < SYSCLK <= 72        |
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccQKe6VG.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - HSE, PLL, PLL2 and PLL3 are OFF
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - CSS and MCO1 OFF
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - All interrupts disabled
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - All flags are cleared
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   This function does not modify the configuration of the
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - Peripheral clocks
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL_StatusTypeDef
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_DeInit(void)
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
  27              		.loc 1 219 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  42              		.loc 1 223 15
  43 0006 FFF7FEFF 		bl	HAL_GetTick
  44 000a 7860     		str	r0, [r7, #4]
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set HSION bit */
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
  45              		.loc 1 226 3
  46 000c 444B     		ldr	r3, .L12
  47 000e 1B68     		ldr	r3, [r3]
  48 0010 434A     		ldr	r2, .L12
  49 0012 43F00103 		orr	r3, r3, #1
  50 0016 1360     		str	r3, [r2]
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till HSI is ready */
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
  51              		.loc 1 229 9
  52 0018 08E0     		b	.L2
  53              	.L4:
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
  54              		.loc 1 231 10
  55 001a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccQKe6VG.s 			page 6


  56 001e 0246     		mov	r2, r0
  57              		.loc 1 231 24
  58 0020 7B68     		ldr	r3, [r7, #4]
  59 0022 D31A     		subs	r3, r2, r3
  60              		.loc 1 231 8
  61 0024 022B     		cmp	r3, #2
  62 0026 01D9     		bls	.L2
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
  63              		.loc 1 233 14
  64 0028 0323     		movs	r3, #3
  65 002a 75E0     		b	.L3
  66              	.L2:
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
  67              		.loc 1 229 10
  68 002c 3C4B     		ldr	r3, .L12
  69 002e 1B68     		ldr	r3, [r3]
  70 0030 03F00203 		and	r3, r3, #2
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
  71              		.loc 1 229 9
  72 0034 002B     		cmp	r3, #0
  73 0036 F0D0     		beq	.L4
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set HSITRIM bits to the reset value */
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
  74              		.loc 1 238 3
  75 0038 394B     		ldr	r3, .L12
  76 003a 1B68     		ldr	r3, [r3]
  77 003c 23F0F803 		bic	r3, r3, #248
  78 0040 374A     		ldr	r2, .L12
  79 0042 43F08003 		orr	r3, r3, #128
  80 0046 1360     		str	r3, [r2]
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  81              		.loc 1 241 15
  82 0048 FFF7FEFF 		bl	HAL_GetTick
  83 004c 7860     		str	r0, [r7, #4]
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR register */
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  84              		.loc 1 244 3
  85 004e 344B     		ldr	r3, .L12
  86 0050 0022     		movs	r2, #0
  87 0052 5A60     		str	r2, [r3, #4]
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till clock switch is ready */
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  88              		.loc 1 247 9
  89 0054 0AE0     		b	.L5
  90              	.L6:
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
  91              		.loc 1 249 10
  92 0056 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccQKe6VG.s 			page 7


  93 005a 0246     		mov	r2, r0
  94              		.loc 1 249 24
  95 005c 7B68     		ldr	r3, [r7, #4]
  96 005e D31A     		subs	r3, r2, r3
  97              		.loc 1 249 8
  98 0060 41F28832 		movw	r2, #5000
  99 0064 9342     		cmp	r3, r2
 100 0066 01D9     		bls	.L5
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 101              		.loc 1 251 14
 102 0068 0323     		movs	r3, #3
 103 006a 55E0     		b	.L3
 104              	.L5:
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 105              		.loc 1 247 10
 106 006c 2C4B     		ldr	r3, .L12
 107 006e 5B68     		ldr	r3, [r3, #4]
 108 0070 03F00C03 		and	r3, r3, #12
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 109              		.loc 1 247 9
 110 0074 002B     		cmp	r3, #0
 111 0076 EED1     		bne	.L6
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
 112              		.loc 1 256 19
 113 0078 2A4B     		ldr	r3, .L12+4
 114 007a 2B4A     		ldr	r2, .L12+8
 115 007c 1A60     		str	r2, [r3]
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Adapt Systick interrupt period */
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 116              		.loc 1 259 6
 117 007e 0020     		movs	r0, #0
 118 0080 FFF7FEFF 		bl	HAL_InitTick
 119 0084 0346     		mov	r3, r0
 120              		.loc 1 259 5
 121 0086 002B     		cmp	r3, #0
 122 0088 01D0     		beq	.L7
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 123              		.loc 1 261 12
 124 008a 0123     		movs	r3, #1
 125 008c 44E0     		b	.L3
 126              	.L7:
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 127              		.loc 1 265 15
 128 008e FFF7FEFF 		bl	HAL_GetTick
 129 0092 7860     		str	r0, [r7, #4]
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Second step is to clear PLLON bit */
ARM GAS  /tmp/ccQKe6VG.s 			page 8


 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 130              		.loc 1 268 3
 131 0094 224B     		ldr	r3, .L12
 132 0096 1B68     		ldr	r3, [r3]
 133 0098 214A     		ldr	r2, .L12
 134 009a 23F08073 		bic	r3, r3, #16777216
 135 009e 1360     		str	r3, [r2]
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL is disabled */
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 136              		.loc 1 271 9
 137 00a0 08E0     		b	.L8
 138              	.L9:
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 139              		.loc 1 273 10
 140 00a2 FFF7FEFF 		bl	HAL_GetTick
 141 00a6 0246     		mov	r2, r0
 142              		.loc 1 273 24
 143 00a8 7B68     		ldr	r3, [r7, #4]
 144 00aa D31A     		subs	r3, r2, r3
 145              		.loc 1 273 8
 146 00ac 022B     		cmp	r3, #2
 147 00ae 01D9     		bls	.L8
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 148              		.loc 1 275 14
 149 00b0 0323     		movs	r3, #3
 150 00b2 31E0     		b	.L3
 151              	.L8:
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 152              		.loc 1 271 10
 153 00b4 1A4B     		ldr	r3, .L12
 154 00b6 1B68     		ldr	r3, [r3]
 155 00b8 03F00073 		and	r3, r3, #33554432
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 156              		.loc 1 271 9
 157 00bc 002B     		cmp	r3, #0
 158 00be F0D1     		bne	.L9
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Ensure to reset PLLSRC and PLLMUL bits */
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
 159              		.loc 1 280 3
 160 00c0 174B     		ldr	r3, .L12
 161 00c2 0022     		movs	r2, #0
 162 00c4 5A60     		str	r2, [r3, #4]
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 163              		.loc 1 283 15
 164 00c6 FFF7FEFF 		bl	HAL_GetTick
 165 00ca 7860     		str	r0, [r7, #4]
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset HSEON & CSSON bits */
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
ARM GAS  /tmp/ccQKe6VG.s 			page 9


 166              		.loc 1 286 3
 167 00cc 144B     		ldr	r3, .L12
 168 00ce 1B68     		ldr	r3, [r3]
 169 00d0 134A     		ldr	r2, .L12
 170 00d2 23F41023 		bic	r3, r3, #589824
 171 00d6 1360     		str	r3, [r2]
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till HSE is disabled */
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 172              		.loc 1 289 9
 173 00d8 08E0     		b	.L10
 174              	.L11:
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 175              		.loc 1 291 10
 176 00da FFF7FEFF 		bl	HAL_GetTick
 177 00de 0246     		mov	r2, r0
 178              		.loc 1 291 24
 179 00e0 7B68     		ldr	r3, [r7, #4]
 180 00e2 D31A     		subs	r3, r2, r3
 181              		.loc 1 291 8
 182 00e4 642B     		cmp	r3, #100
 183 00e6 01D9     		bls	.L10
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 184              		.loc 1 293 14
 185 00e8 0323     		movs	r3, #3
 186 00ea 15E0     		b	.L3
 187              	.L10:
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 188              		.loc 1 289 10
 189 00ec 0C4B     		ldr	r3, .L12
 190 00ee 1B68     		ldr	r3, [r3]
 191 00f0 03F40033 		and	r3, r3, #131072
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 192              		.loc 1 289 9
 193 00f4 002B     		cmp	r3, #0
 194 00f6 F0D1     		bne	.L11
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 195              		.loc 1 298 3
 196 00f8 094B     		ldr	r3, .L12
 197 00fa 1B68     		ldr	r3, [r3]
 198 00fc 084A     		ldr	r2, .L12
 199 00fe 23F48023 		bic	r3, r3, #262144
 200 0102 1360     		str	r3, [r2]
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLL2_SUPPORT)
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Clear PLL2ON bit */
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccQKe6VG.s 			page 10


 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL2 is disabled */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLL2_SUPPORT */
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLLI2S_SUPPORT)
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Clear PLL3ON bit */
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL3 is disabled */
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLLI2S_SUPPORT */
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR2 register */
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR2);
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1 */
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset all CSR flags */
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 201              		.loc 1 340 3
 202 0104 064B     		ldr	r3, .L12
 203 0106 5B6A     		ldr	r3, [r3, #36]
 204 0108 054A     		ldr	r2, .L12
 205 010a 43F08073 		orr	r3, r3, #16777216
 206 010e 5362     		str	r3, [r2, #36]
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Disable all interrupts */
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR);
 207              		.loc 1 343 3
 208 0110 034B     		ldr	r3, .L12
 209 0112 0022     		movs	r2, #0
 210 0114 9A60     		str	r2, [r3, #8]
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 211              		.loc 1 345 10
 212 0116 0023     		movs	r3, #0
 213              	.L3:
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 214              		.loc 1 346 1
 215 0118 1846     		mov	r0, r3
 216 011a 0837     		adds	r7, r7, #8
 217              	.LCFI3:
ARM GAS  /tmp/ccQKe6VG.s 			page 11


 218              		.cfi_def_cfa_offset 8
 219 011c BD46     		mov	sp, r7
 220              	.LCFI4:
 221              		.cfi_def_cfa_register 13
 222              		@ sp needed
 223 011e 80BD     		pop	{r7, pc}
 224              	.L13:
 225              		.align	2
 226              	.L12:
 227 0120 00100240 		.word	1073876992
 228 0124 00000000 		.word	SystemCoreClock
 229 0128 00127A00 		.word	8000000
 230              		.cfi_endproc
 231              	.LFE66:
 233              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 234              		.align	1
 235              		.global	HAL_RCC_OscConfig
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu softvfp
 241              	HAL_RCC_OscConfig:
 242              	.LFB67:
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB 
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to LSE Off
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to HSE Off
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 243              		.loc 1 364 1
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 24
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247 0000 80B5     		push	{r7, lr}
 248              	.LCFI5:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 7, -8
 251              		.cfi_offset 14, -4
 252 0002 86B0     		sub	sp, sp, #24
 253              	.LCFI6:
 254              		.cfi_def_cfa_offset 32
 255 0004 00AF     		add	r7, sp, #0
 256              	.LCFI7:
 257              		.cfi_def_cfa_register 7
 258 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccQKe6VG.s 			page 12


 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****    uint32_t tickstart = 0U;
 259              		.loc 1 365 13
 260 0008 0023     		movs	r3, #0
 261 000a 3B61     		str	r3, [r7, #16]
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 262              		.loc 1 372 25
 263 000c 7B68     		ldr	r3, [r7, #4]
 264 000e 1B68     		ldr	r3, [r3]
 265              		.loc 1 372 43
 266 0010 03F00103 		and	r3, r3, #1
 267              		.loc 1 372 5
 268 0014 002B     		cmp	r3, #0
 269 0016 00F08780 		beq	.L15
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 270              		.loc 1 378 9
 271 001a 924B     		ldr	r3, .L70
 272 001c 5B68     		ldr	r3, [r3, #4]
 273 001e 03F00C03 		and	r3, r3, #12
 274              		.loc 1 378 7
 275 0022 042B     		cmp	r3, #4
 276 0024 0CD0     		beq	.L16
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 277              		.loc 1 379 13
 278 0026 8F4B     		ldr	r3, .L70
 279 0028 5B68     		ldr	r3, [r3, #4]
 280 002a 03F00C03 		and	r3, r3, #12
 281              		.loc 1 379 8
 282 002e 082B     		cmp	r3, #8
 283 0030 12D1     		bne	.L17
 284              		.loc 1 379 82 discriminator 1
 285 0032 8C4B     		ldr	r3, .L70
 286 0034 5B68     		ldr	r3, [r3, #4]
 287 0036 03F48033 		and	r3, r3, #65536
 288              		.loc 1 379 78 discriminator 1
 289 003a B3F5803F 		cmp	r3, #65536
 290 003e 0BD1     		bne	.L17
 291              	.L16:
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 292              		.loc 1 381 11
 293 0040 884B     		ldr	r3, .L70
 294 0042 1B68     		ldr	r3, [r3]
 295 0044 03F40033 		and	r3, r3, #131072
 296              		.loc 1 381 9
 297 0048 002B     		cmp	r3, #0
 298 004a 6CD0     		beq	.L69
ARM GAS  /tmp/ccQKe6VG.s 			page 13


 299              		.loc 1 381 78 discriminator 1
 300 004c 7B68     		ldr	r3, [r7, #4]
 301 004e 5B68     		ldr	r3, [r3, #4]
 302              		.loc 1 381 57 discriminator 1
 303 0050 002B     		cmp	r3, #0
 304 0052 68D1     		bne	.L69
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 305              		.loc 1 383 16
 306 0054 0123     		movs	r3, #1
 307 0056 2DE2     		b	.L19
 308              	.L17:
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 309              		.loc 1 389 7
 310 0058 7B68     		ldr	r3, [r7, #4]
 311 005a 5B68     		ldr	r3, [r3, #4]
 312 005c B3F5803F 		cmp	r3, #65536
 313 0060 06D1     		bne	.L20
 314              		.loc 1 389 7 is_stmt 0 discriminator 1
 315 0062 804B     		ldr	r3, .L70
 316 0064 1B68     		ldr	r3, [r3]
 317 0066 7F4A     		ldr	r2, .L70
 318 0068 43F48033 		orr	r3, r3, #65536
 319 006c 1360     		str	r3, [r2]
 320 006e 2EE0     		b	.L21
 321              	.L20:
 322              		.loc 1 389 7 discriminator 2
 323 0070 7B68     		ldr	r3, [r7, #4]
 324 0072 5B68     		ldr	r3, [r3, #4]
 325 0074 002B     		cmp	r3, #0
 326 0076 0CD1     		bne	.L22
 327              		.loc 1 389 7 discriminator 3
 328 0078 7A4B     		ldr	r3, .L70
 329 007a 1B68     		ldr	r3, [r3]
 330 007c 794A     		ldr	r2, .L70
 331 007e 23F48033 		bic	r3, r3, #65536
 332 0082 1360     		str	r3, [r2]
 333 0084 774B     		ldr	r3, .L70
 334 0086 1B68     		ldr	r3, [r3]
 335 0088 764A     		ldr	r2, .L70
 336 008a 23F48023 		bic	r3, r3, #262144
 337 008e 1360     		str	r3, [r2]
 338 0090 1DE0     		b	.L21
 339              	.L22:
 340              		.loc 1 389 7 discriminator 4
 341 0092 7B68     		ldr	r3, [r7, #4]
 342 0094 5B68     		ldr	r3, [r3, #4]
 343 0096 B3F5A02F 		cmp	r3, #327680
 344 009a 0CD1     		bne	.L23
 345              		.loc 1 389 7 discriminator 5
 346 009c 714B     		ldr	r3, .L70
 347 009e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQKe6VG.s 			page 14


 348 00a0 704A     		ldr	r2, .L70
 349 00a2 43F48023 		orr	r3, r3, #262144
 350 00a6 1360     		str	r3, [r2]
 351 00a8 6E4B     		ldr	r3, .L70
 352 00aa 1B68     		ldr	r3, [r3]
 353 00ac 6D4A     		ldr	r2, .L70
 354 00ae 43F48033 		orr	r3, r3, #65536
 355 00b2 1360     		str	r3, [r2]
 356 00b4 0BE0     		b	.L21
 357              	.L23:
 358              		.loc 1 389 7 discriminator 6
 359 00b6 6B4B     		ldr	r3, .L70
 360 00b8 1B68     		ldr	r3, [r3]
 361 00ba 6A4A     		ldr	r2, .L70
 362 00bc 23F48033 		bic	r3, r3, #65536
 363 00c0 1360     		str	r3, [r2]
 364 00c2 684B     		ldr	r3, .L70
 365 00c4 1B68     		ldr	r3, [r3]
 366 00c6 674A     		ldr	r2, .L70
 367 00c8 23F48023 		bic	r3, r3, #262144
 368 00cc 1360     		str	r3, [r2]
 369              	.L21:
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        /* Check the HSE State */
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 370              		.loc 1 393 27 is_stmt 1
 371 00ce 7B68     		ldr	r3, [r7, #4]
 372 00d0 5B68     		ldr	r3, [r3, #4]
 373              		.loc 1 393 9
 374 00d2 002B     		cmp	r3, #0
 375 00d4 13D0     		beq	.L24
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 376              		.loc 1 396 21
 377 00d6 FFF7FEFF 		bl	HAL_GetTick
 378 00da 3861     		str	r0, [r7, #16]
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is ready */
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 379              		.loc 1 399 14
 380 00dc 08E0     		b	.L25
 381              	.L26:
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 382              		.loc 1 401 15
 383 00de FFF7FEFF 		bl	HAL_GetTick
 384 00e2 0246     		mov	r2, r0
 385              		.loc 1 401 29
 386 00e4 3B69     		ldr	r3, [r7, #16]
 387 00e6 D31A     		subs	r3, r2, r3
 388              		.loc 1 401 13
 389 00e8 642B     		cmp	r3, #100
 390 00ea 01D9     		bls	.L25
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
ARM GAS  /tmp/ccQKe6VG.s 			page 15


 391              		.loc 1 403 20
 392 00ec 0323     		movs	r3, #3
 393 00ee E1E1     		b	.L19
 394              	.L25:
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 395              		.loc 1 399 15
 396 00f0 5C4B     		ldr	r3, .L70
 397 00f2 1B68     		ldr	r3, [r3]
 398 00f4 03F40033 		and	r3, r3, #131072
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 399              		.loc 1 399 14
 400 00f8 002B     		cmp	r3, #0
 401 00fa F0D0     		beq	.L26
 402 00fc 14E0     		b	.L15
 403              	.L24:
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 404              		.loc 1 410 21
 405 00fe FFF7FEFF 		bl	HAL_GetTick
 406 0102 3861     		str	r0, [r7, #16]
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is disabled */
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 407              		.loc 1 413 14
 408 0104 08E0     		b	.L27
 409              	.L28:
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 410              		.loc 1 415 16
 411 0106 FFF7FEFF 		bl	HAL_GetTick
 412 010a 0246     		mov	r2, r0
 413              		.loc 1 415 30
 414 010c 3B69     		ldr	r3, [r7, #16]
 415 010e D31A     		subs	r3, r2, r3
 416              		.loc 1 415 14
 417 0110 642B     		cmp	r3, #100
 418 0112 01D9     		bls	.L27
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 419              		.loc 1 417 20
 420 0114 0323     		movs	r3, #3
 421 0116 CDE1     		b	.L19
 422              	.L27:
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 423              		.loc 1 413 15
 424 0118 524B     		ldr	r3, .L70
 425 011a 1B68     		ldr	r3, [r3]
 426 011c 03F40033 		and	r3, r3, #131072
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 427              		.loc 1 413 14
 428 0120 002B     		cmp	r3, #0
 429 0122 F0D1     		bne	.L28
ARM GAS  /tmp/ccQKe6VG.s 			page 16


 430 0124 00E0     		b	.L15
 431              	.L69:
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 432              		.loc 1 381 9
 433 0126 00BF     		nop
 434              	.L15:
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 435              		.loc 1 424 25
 436 0128 7B68     		ldr	r3, [r7, #4]
 437 012a 1B68     		ldr	r3, [r3]
 438              		.loc 1 424 43
 439 012c 03F00203 		and	r3, r3, #2
 440              		.loc 1 424 5
 441 0130 002B     		cmp	r3, #0
 442 0132 63D0     		beq	.L29
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 443              		.loc 1 431 9
 444 0134 4B4B     		ldr	r3, .L70
 445 0136 5B68     		ldr	r3, [r3, #4]
 446 0138 03F00C03 		and	r3, r3, #12
 447              		.loc 1 431 7
 448 013c 002B     		cmp	r3, #0
 449 013e 0BD0     		beq	.L30
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 450              		.loc 1 432 13
 451 0140 484B     		ldr	r3, .L70
 452 0142 5B68     		ldr	r3, [r3, #4]
 453 0144 03F00C03 		and	r3, r3, #12
 454              		.loc 1 432 8
 455 0148 082B     		cmp	r3, #8
 456 014a 1CD1     		bne	.L31
 457              		.loc 1 432 82 discriminator 1
 458 014c 454B     		ldr	r3, .L70
 459 014e 5B68     		ldr	r3, [r3, #4]
 460 0150 03F48033 		and	r3, r3, #65536
 461              		.loc 1 432 78 discriminator 1
 462 0154 002B     		cmp	r3, #0
 463 0156 16D1     		bne	.L31
 464              	.L30:
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 465              		.loc 1 435 11
 466 0158 424B     		ldr	r3, .L70
 467 015a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQKe6VG.s 			page 17


 468 015c 03F00203 		and	r3, r3, #2
 469              		.loc 1 435 9
 470 0160 002B     		cmp	r3, #0
 471 0162 05D0     		beq	.L32
 472              		.loc 1 435 78 discriminator 1
 473 0164 7B68     		ldr	r3, [r7, #4]
 474 0166 1B69     		ldr	r3, [r3, #16]
 475              		.loc 1 435 57 discriminator 1
 476 0168 012B     		cmp	r3, #1
 477 016a 01D0     		beq	.L32
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 478              		.loc 1 437 16
 479 016c 0123     		movs	r3, #1
 480 016e A1E1     		b	.L19
 481              	.L32:
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 482              		.loc 1 443 9
 483 0170 3C4B     		ldr	r3, .L70
 484 0172 1B68     		ldr	r3, [r3]
 485 0174 23F0F802 		bic	r2, r3, #248
 486 0178 7B68     		ldr	r3, [r7, #4]
 487 017a 5B69     		ldr	r3, [r3, #20]
 488 017c DB00     		lsls	r3, r3, #3
 489 017e 3949     		ldr	r1, .L70
 490 0180 1343     		orrs	r3, r3, r2
 491 0182 0B60     		str	r3, [r1]
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 492              		.loc 1 435 9
 493 0184 3AE0     		b	.L29
 494              	.L31:
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSI State */
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 495              		.loc 1 449 27
 496 0186 7B68     		ldr	r3, [r7, #4]
 497 0188 1B69     		ldr	r3, [r3, #16]
 498              		.loc 1 449 9
 499 018a 002B     		cmp	r3, #0
 500 018c 20D0     		beq	.L33
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        /* Enable the Internal High Speed oscillator (HSI). */
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 501              		.loc 1 452 9
 502 018e 364B     		ldr	r3, .L70+4
 503 0190 0122     		movs	r2, #1
 504 0192 1A60     		str	r2, [r3]
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
ARM GAS  /tmp/ccQKe6VG.s 			page 18


 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 505              		.loc 1 455 21
 506 0194 FFF7FEFF 		bl	HAL_GetTick
 507 0198 3861     		str	r0, [r7, #16]
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is ready */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 508              		.loc 1 458 14
 509 019a 08E0     		b	.L34
 510              	.L35:
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 511              		.loc 1 460 15
 512 019c FFF7FEFF 		bl	HAL_GetTick
 513 01a0 0246     		mov	r2, r0
 514              		.loc 1 460 29
 515 01a2 3B69     		ldr	r3, [r7, #16]
 516 01a4 D31A     		subs	r3, r2, r3
 517              		.loc 1 460 13
 518 01a6 022B     		cmp	r3, #2
 519 01a8 01D9     		bls	.L34
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 520              		.loc 1 462 20
 521 01aa 0323     		movs	r3, #3
 522 01ac 82E1     		b	.L19
 523              	.L34:
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 524              		.loc 1 458 15
 525 01ae 2D4B     		ldr	r3, .L70
 526 01b0 1B68     		ldr	r3, [r3]
 527 01b2 03F00203 		and	r3, r3, #2
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 528              		.loc 1 458 14
 529 01b6 002B     		cmp	r3, #0
 530 01b8 F0D0     		beq	.L35
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 531              		.loc 1 467 9
 532 01ba 2A4B     		ldr	r3, .L70
 533 01bc 1B68     		ldr	r3, [r3]
 534 01be 23F0F802 		bic	r2, r3, #248
 535 01c2 7B68     		ldr	r3, [r7, #4]
 536 01c4 5B69     		ldr	r3, [r3, #20]
 537 01c6 DB00     		lsls	r3, r3, #3
 538 01c8 2649     		ldr	r1, .L70
 539 01ca 1343     		orrs	r3, r3, r2
 540 01cc 0B60     		str	r3, [r1]
 541 01ce 15E0     		b	.L29
 542              	.L33:
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
ARM GAS  /tmp/ccQKe6VG.s 			page 19


 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 543              		.loc 1 472 9
 544 01d0 254B     		ldr	r3, .L70+4
 545 01d2 0022     		movs	r2, #0
 546 01d4 1A60     		str	r2, [r3]
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 547              		.loc 1 475 21
 548 01d6 FFF7FEFF 		bl	HAL_GetTick
 549 01da 3861     		str	r0, [r7, #16]
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is disabled */
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 550              		.loc 1 478 14
 551 01dc 08E0     		b	.L36
 552              	.L37:
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 553              		.loc 1 480 15
 554 01de FFF7FEFF 		bl	HAL_GetTick
 555 01e2 0246     		mov	r2, r0
 556              		.loc 1 480 29
 557 01e4 3B69     		ldr	r3, [r7, #16]
 558 01e6 D31A     		subs	r3, r2, r3
 559              		.loc 1 480 13
 560 01e8 022B     		cmp	r3, #2
 561 01ea 01D9     		bls	.L36
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 562              		.loc 1 482 20
 563 01ec 0323     		movs	r3, #3
 564 01ee 61E1     		b	.L19
 565              	.L36:
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 566              		.loc 1 478 15
 567 01f0 1C4B     		ldr	r3, .L70
 568 01f2 1B68     		ldr	r3, [r3]
 569 01f4 03F00203 		and	r3, r3, #2
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 570              		.loc 1 478 14
 571 01f8 002B     		cmp	r3, #0
 572 01fa F0D1     		bne	.L37
 573              	.L29:
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/ 
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 574              		.loc 1 489 25
 575 01fc 7B68     		ldr	r3, [r7, #4]
 576 01fe 1B68     		ldr	r3, [r3]
 577              		.loc 1 489 43
 578 0200 03F00803 		and	r3, r3, #8
 579              		.loc 1 489 5
ARM GAS  /tmp/ccQKe6VG.s 			page 20


 580 0204 002B     		cmp	r3, #0
 581 0206 39D0     		beq	.L38
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the LSI State */
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 582              		.loc 1 495 25
 583 0208 7B68     		ldr	r3, [r7, #4]
 584 020a 9B69     		ldr	r3, [r3, #24]
 585              		.loc 1 495 7
 586 020c 002B     		cmp	r3, #0
 587 020e 19D0     		beq	.L39
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 588              		.loc 1 498 7
 589 0210 164B     		ldr	r3, .L70+8
 590 0212 0122     		movs	r2, #1
 591 0214 1A60     		str	r2, [r3]
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 592              		.loc 1 501 19
 593 0216 FFF7FEFF 		bl	HAL_GetTick
 594 021a 3861     		str	r0, [r7, #16]
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 595              		.loc 1 504 12
 596 021c 08E0     		b	.L40
 597              	.L41:
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 598              		.loc 1 506 13
 599 021e FFF7FEFF 		bl	HAL_GetTick
 600 0222 0246     		mov	r2, r0
 601              		.loc 1 506 27
 602 0224 3B69     		ldr	r3, [r7, #16]
 603 0226 D31A     		subs	r3, r2, r3
 604              		.loc 1 506 11
 605 0228 022B     		cmp	r3, #2
 606 022a 01D9     		bls	.L40
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 607              		.loc 1 508 18
 608 022c 0323     		movs	r3, #3
 609 022e 41E1     		b	.L19
 610              	.L40:
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 611              		.loc 1 504 13
 612 0230 0C4B     		ldr	r3, .L70
 613 0232 5B6A     		ldr	r3, [r3, #36]
 614 0234 03F00203 		and	r3, r3, #2
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 615              		.loc 1 504 12
ARM GAS  /tmp/ccQKe6VG.s 			page 21


 616 0238 002B     		cmp	r3, #0
 617 023a F0D0     		beq	.L41
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           should be added.*/
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       RCC_Delay(1);
 618              		.loc 1 513 7
 619 023c 0120     		movs	r0, #1
 620 023e FFF7FEFF 		bl	RCC_Delay
 621 0242 1BE0     		b	.L38
 622              	.L39:
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 623              		.loc 1 518 7
 624 0244 094B     		ldr	r3, .L70+8
 625 0246 0022     		movs	r2, #0
 626 0248 1A60     		str	r2, [r3]
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 627              		.loc 1 521 19
 628 024a FFF7FEFF 		bl	HAL_GetTick
 629 024e 3861     		str	r0, [r7, #16]
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is disabled */  
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 630              		.loc 1 524 12
 631 0250 0EE0     		b	.L42
 632              	.L43:
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 633              		.loc 1 526 13
 634 0252 FFF7FEFF 		bl	HAL_GetTick
 635 0256 0246     		mov	r2, r0
 636              		.loc 1 526 27
 637 0258 3B69     		ldr	r3, [r7, #16]
 638 025a D31A     		subs	r3, r2, r3
 639              		.loc 1 526 11
 640 025c 022B     		cmp	r3, #2
 641 025e 07D9     		bls	.L42
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 642              		.loc 1 528 18
 643 0260 0323     		movs	r3, #3
 644 0262 27E1     		b	.L19
 645              	.L71:
 646              		.align	2
 647              	.L70:
 648 0264 00100240 		.word	1073876992
 649 0268 00004242 		.word	1111621632
 650 026c 80044242 		.word	1111622784
 651              	.L42:
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccQKe6VG.s 			page 22


 652              		.loc 1 524 13
 653 0270 924B     		ldr	r3, .L72
 654 0272 5B6A     		ldr	r3, [r3, #36]
 655 0274 03F00203 		and	r3, r3, #2
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 656              		.loc 1 524 12
 657 0278 002B     		cmp	r3, #0
 658 027a EAD1     		bne	.L43
 659              	.L38:
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 660              		.loc 1 534 25
 661 027c 7B68     		ldr	r3, [r7, #4]
 662 027e 1B68     		ldr	r3, [r3]
 663              		.loc 1 534 43
 664 0280 03F00403 		and	r3, r3, #4
 665              		.loc 1 534 5
 666 0284 002B     		cmp	r3, #0
 667 0286 00F0A680 		beq	.L44
 668              	.LBB4:
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     FlagStatus       pwrclkchanged = RESET;
 669              		.loc 1 536 22
 670 028a 0023     		movs	r3, #0
 671 028c FB75     		strb	r3, [r7, #23]
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 672              		.loc 1 543 8
 673 028e 8B4B     		ldr	r3, .L72
 674 0290 DB69     		ldr	r3, [r3, #28]
 675 0292 03F08053 		and	r3, r3, #268435456
 676              		.loc 1 543 7
 677 0296 002B     		cmp	r3, #0
 678 0298 0DD1     		bne	.L45
 679              	.LBB5:
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 680              		.loc 1 545 7
 681 029a 884B     		ldr	r3, .L72
 682 029c DB69     		ldr	r3, [r3, #28]
 683 029e 874A     		ldr	r2, .L72
 684 02a0 43F08053 		orr	r3, r3, #268435456
 685 02a4 D361     		str	r3, [r2, #28]
 686 02a6 854B     		ldr	r3, .L72
 687 02a8 DB69     		ldr	r3, [r3, #28]
 688 02aa 03F08053 		and	r3, r3, #268435456
 689 02ae FB60     		str	r3, [r7, #12]
 690 02b0 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccQKe6VG.s 			page 23


 691              	.LBE5:
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       pwrclkchanged = SET;
 692              		.loc 1 546 21
 693 02b2 0123     		movs	r3, #1
 694 02b4 FB75     		strb	r3, [r7, #23]
 695              	.L45:
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 696              		.loc 1 549 8
 697 02b6 824B     		ldr	r3, .L72+4
 698 02b8 1B68     		ldr	r3, [r3]
 699 02ba 03F48073 		and	r3, r3, #256
 700              		.loc 1 549 7
 701 02be 002B     		cmp	r3, #0
 702 02c0 18D1     		bne	.L46
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 703              		.loc 1 552 7
 704 02c2 7F4B     		ldr	r3, .L72+4
 705 02c4 1B68     		ldr	r3, [r3]
 706 02c6 7E4A     		ldr	r2, .L72+4
 707 02c8 43F48073 		orr	r3, r3, #256
 708 02cc 1360     		str	r3, [r2]
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 709              		.loc 1 555 19
 710 02ce FFF7FEFF 		bl	HAL_GetTick
 711 02d2 3861     		str	r0, [r7, #16]
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 712              		.loc 1 557 12
 713 02d4 08E0     		b	.L47
 714              	.L48:
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 715              		.loc 1 559 13
 716 02d6 FFF7FEFF 		bl	HAL_GetTick
 717 02da 0246     		mov	r2, r0
 718              		.loc 1 559 27
 719 02dc 3B69     		ldr	r3, [r7, #16]
 720 02de D31A     		subs	r3, r2, r3
 721              		.loc 1 559 11
 722 02e0 642B     		cmp	r3, #100
 723 02e2 01D9     		bls	.L47
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 724              		.loc 1 561 18
 725 02e4 0323     		movs	r3, #3
 726 02e6 E5E0     		b	.L19
 727              	.L47:
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 728              		.loc 1 557 13
 729 02e8 754B     		ldr	r3, .L72+4
 730 02ea 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQKe6VG.s 			page 24


 731 02ec 03F48073 		and	r3, r3, #256
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 732              		.loc 1 557 12
 733 02f0 002B     		cmp	r3, #0
 734 02f2 F0D0     		beq	.L48
 735              	.L46:
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 736              		.loc 1 567 5
 737 02f4 7B68     		ldr	r3, [r7, #4]
 738 02f6 DB68     		ldr	r3, [r3, #12]
 739 02f8 012B     		cmp	r3, #1
 740 02fa 06D1     		bne	.L49
 741              		.loc 1 567 5 is_stmt 0 discriminator 1
 742 02fc 6F4B     		ldr	r3, .L72
 743 02fe 1B6A     		ldr	r3, [r3, #32]
 744 0300 6E4A     		ldr	r2, .L72
 745 0302 43F00103 		orr	r3, r3, #1
 746 0306 1362     		str	r3, [r2, #32]
 747 0308 2DE0     		b	.L50
 748              	.L49:
 749              		.loc 1 567 5 discriminator 2
 750 030a 7B68     		ldr	r3, [r7, #4]
 751 030c DB68     		ldr	r3, [r3, #12]
 752 030e 002B     		cmp	r3, #0
 753 0310 0CD1     		bne	.L51
 754              		.loc 1 567 5 discriminator 3
 755 0312 6A4B     		ldr	r3, .L72
 756 0314 1B6A     		ldr	r3, [r3, #32]
 757 0316 694A     		ldr	r2, .L72
 758 0318 23F00103 		bic	r3, r3, #1
 759 031c 1362     		str	r3, [r2, #32]
 760 031e 674B     		ldr	r3, .L72
 761 0320 1B6A     		ldr	r3, [r3, #32]
 762 0322 664A     		ldr	r2, .L72
 763 0324 23F00403 		bic	r3, r3, #4
 764 0328 1362     		str	r3, [r2, #32]
 765 032a 1CE0     		b	.L50
 766              	.L51:
 767              		.loc 1 567 5 discriminator 4
 768 032c 7B68     		ldr	r3, [r7, #4]
 769 032e DB68     		ldr	r3, [r3, #12]
 770 0330 052B     		cmp	r3, #5
 771 0332 0CD1     		bne	.L52
 772              		.loc 1 567 5 discriminator 5
 773 0334 614B     		ldr	r3, .L72
 774 0336 1B6A     		ldr	r3, [r3, #32]
 775 0338 604A     		ldr	r2, .L72
 776 033a 43F00403 		orr	r3, r3, #4
 777 033e 1362     		str	r3, [r2, #32]
 778 0340 5E4B     		ldr	r3, .L72
 779 0342 1B6A     		ldr	r3, [r3, #32]
 780 0344 5D4A     		ldr	r2, .L72
ARM GAS  /tmp/ccQKe6VG.s 			page 25


 781 0346 43F00103 		orr	r3, r3, #1
 782 034a 1362     		str	r3, [r2, #32]
 783 034c 0BE0     		b	.L50
 784              	.L52:
 785              		.loc 1 567 5 discriminator 6
 786 034e 5B4B     		ldr	r3, .L72
 787 0350 1B6A     		ldr	r3, [r3, #32]
 788 0352 5A4A     		ldr	r2, .L72
 789 0354 23F00103 		bic	r3, r3, #1
 790 0358 1362     		str	r3, [r2, #32]
 791 035a 584B     		ldr	r3, .L72
 792 035c 1B6A     		ldr	r3, [r3, #32]
 793 035e 574A     		ldr	r2, .L72
 794 0360 23F00403 		bic	r3, r3, #4
 795 0364 1362     		str	r3, [r2, #32]
 796              	.L50:
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 797              		.loc 1 569 25 is_stmt 1
 798 0366 7B68     		ldr	r3, [r7, #4]
 799 0368 DB68     		ldr	r3, [r3, #12]
 800              		.loc 1 569 7
 801 036a 002B     		cmp	r3, #0
 802 036c 15D0     		beq	.L53
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 803              		.loc 1 572 19
 804 036e FFF7FEFF 		bl	HAL_GetTick
 805 0372 3861     		str	r0, [r7, #16]
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 806              		.loc 1 575 12
 807 0374 0AE0     		b	.L54
 808              	.L55:
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 809              		.loc 1 577 13
 810 0376 FFF7FEFF 		bl	HAL_GetTick
 811 037a 0246     		mov	r2, r0
 812              		.loc 1 577 27
 813 037c 3B69     		ldr	r3, [r7, #16]
 814 037e D31A     		subs	r3, r2, r3
 815              		.loc 1 577 11
 816 0380 41F28832 		movw	r2, #5000
 817 0384 9342     		cmp	r3, r2
 818 0386 01D9     		bls	.L54
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 819              		.loc 1 579 18
 820 0388 0323     		movs	r3, #3
 821 038a 93E0     		b	.L19
 822              	.L54:
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 823              		.loc 1 575 13
 824 038c 4B4B     		ldr	r3, .L72
ARM GAS  /tmp/ccQKe6VG.s 			page 26


 825 038e 1B6A     		ldr	r3, [r3, #32]
 826 0390 03F00203 		and	r3, r3, #2
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 827              		.loc 1 575 12
 828 0394 002B     		cmp	r3, #0
 829 0396 EED0     		beq	.L55
 830 0398 14E0     		b	.L56
 831              	.L53:
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 832              		.loc 1 586 19
 833 039a FFF7FEFF 		bl	HAL_GetTick
 834 039e 3861     		str	r0, [r7, #16]
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is disabled */  
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 835              		.loc 1 589 12
 836 03a0 0AE0     		b	.L57
 837              	.L58:
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 838              		.loc 1 591 13
 839 03a2 FFF7FEFF 		bl	HAL_GetTick
 840 03a6 0246     		mov	r2, r0
 841              		.loc 1 591 27
 842 03a8 3B69     		ldr	r3, [r7, #16]
 843 03aa D31A     		subs	r3, r2, r3
 844              		.loc 1 591 11
 845 03ac 41F28832 		movw	r2, #5000
 846 03b0 9342     		cmp	r3, r2
 847 03b2 01D9     		bls	.L57
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 848              		.loc 1 593 18
 849 03b4 0323     		movs	r3, #3
 850 03b6 7DE0     		b	.L19
 851              	.L57:
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 852              		.loc 1 589 13
 853 03b8 404B     		ldr	r3, .L72
 854 03ba 1B6A     		ldr	r3, [r3, #32]
 855 03bc 03F00203 		and	r3, r3, #2
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 856              		.loc 1 589 12
 857 03c0 002B     		cmp	r3, #0
 858 03c2 EED1     		bne	.L58
 859              	.L56:
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Require to disable power clock if necessary */
ARM GAS  /tmp/ccQKe6VG.s 			page 27


 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(pwrclkchanged == SET)
 860              		.loc 1 599 7
 861 03c4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 862 03c6 012B     		cmp	r3, #1
 863 03c8 05D1     		bne	.L44
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 864              		.loc 1 601 7
 865 03ca 3C4B     		ldr	r3, .L72
 866 03cc DB69     		ldr	r3, [r3, #28]
 867 03ce 3B4A     		ldr	r2, .L72
 868 03d0 23F08053 		bic	r3, r3, #268435456
 869 03d4 D361     		str	r3, [r2, #28]
 870              	.L44:
 871              	.LBE4:
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL2 Configuration -----------------------*/
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       clock (i.e. it is used as PLL clock entry that is used as system clock). */
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Prediv2 can be written only when the PLLI2S is disabled. */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Return an error only if new value is different from the programmed value */
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_ERROR;
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
ARM GAS  /tmp/ccQKe6VG.s 			page 28


 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv2 factor --------------------------------*/
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL2 multiplication factors. */
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL2. */
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_ENABLE();
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is ready */
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        /* Set PREDIV1 source to HSE */
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */  
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 872              		.loc 1 698 30
 873 03d6 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccQKe6VG.s 			page 29


 874 03d8 DB69     		ldr	r3, [r3, #28]
 875              		.loc 1 698 6
 876 03da 002B     		cmp	r3, #0
 877 03dc 69D0     		beq	.L59
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 878              		.loc 1 701 8
 879 03de 374B     		ldr	r3, .L72
 880 03e0 5B68     		ldr	r3, [r3, #4]
 881 03e2 03F00C03 		and	r3, r3, #12
 882              		.loc 1 701 7
 883 03e6 082B     		cmp	r3, #8
 884 03e8 61D0     		beq	.L60
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     { 
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 885              		.loc 1 703 33
 886 03ea 7B68     		ldr	r3, [r7, #4]
 887 03ec DB69     		ldr	r3, [r3, #28]
 888              		.loc 1 703 9
 889 03ee 022B     		cmp	r3, #2
 890 03f0 46D1     		bne	.L61
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 891              		.loc 1 710 9
 892 03f2 344B     		ldr	r3, .L72+8
 893 03f4 0022     		movs	r2, #0
 894 03f6 1A60     		str	r2, [r3]
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 895              		.loc 1 713 21
 896 03f8 FFF7FEFF 		bl	HAL_GetTick
 897 03fc 3861     		str	r0, [r7, #16]
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 898              		.loc 1 716 14
 899 03fe 08E0     		b	.L62
 900              	.L63:
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 901              		.loc 1 718 15
 902 0400 FFF7FEFF 		bl	HAL_GetTick
 903 0404 0246     		mov	r2, r0
 904              		.loc 1 718 29
 905 0406 3B69     		ldr	r3, [r7, #16]
 906 0408 D31A     		subs	r3, r2, r3
 907              		.loc 1 718 13
 908 040a 022B     		cmp	r3, #2
 909 040c 01D9     		bls	.L62
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
ARM GAS  /tmp/ccQKe6VG.s 			page 30


 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 910              		.loc 1 720 20
 911 040e 0323     		movs	r3, #3
 912 0410 50E0     		b	.L19
 913              	.L62:
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 914              		.loc 1 716 15
 915 0412 2A4B     		ldr	r3, .L72
 916 0414 1B68     		ldr	r3, [r3]
 917 0416 03F00073 		and	r3, r3, #33554432
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 918              		.loc 1 716 14
 919 041a 002B     		cmp	r3, #0
 920 041c F0D1     		bne	.L63
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv factor --------------------------------*/
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* It can be written only when the PLL is disabled. Not used in PLL source is different tha
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 921              		.loc 1 726 34
 922 041e 7B68     		ldr	r3, [r7, #4]
 923 0420 1B6A     		ldr	r3, [r3, #32]
 924              		.loc 1 726 11
 925 0422 B3F5803F 		cmp	r3, #65536
 926 0426 08D1     		bne	.L64
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Check the parameter */
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 source */
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 Value */
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 927              		.loc 1 738 11
 928 0428 244B     		ldr	r3, .L72
 929 042a 5B68     		ldr	r3, [r3, #4]
 930 042c 23F40032 		bic	r2, r3, #131072
 931 0430 7B68     		ldr	r3, [r7, #4]
 932 0432 9B68     		ldr	r3, [r3, #8]
 933 0434 2149     		ldr	r1, .L72
 934 0436 1343     		orrs	r3, r3, r2
 935 0438 4B60     		str	r3, [r1, #4]
 936              	.L64:
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL clock source and multiplication factors. */
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 937              		.loc 1 742 9
 938 043a 204B     		ldr	r3, .L72
 939 043c 5B68     		ldr	r3, [r3, #4]
 940 043e 23F47412 		bic	r2, r3, #3997696
 941 0442 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccQKe6VG.s 			page 31


 942 0444 196A     		ldr	r1, [r3, #32]
 943 0446 7B68     		ldr	r3, [r7, #4]
 944 0448 5B6A     		ldr	r3, [r3, #36]
 945 044a 0B43     		orrs	r3, r3, r1
 946 044c 1B49     		ldr	r1, .L72
 947 044e 1343     		orrs	r3, r3, r2
 948 0450 4B60     		str	r3, [r1, #4]
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL. */
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 949              		.loc 1 745 9
 950 0452 1C4B     		ldr	r3, .L72+8
 951 0454 0122     		movs	r2, #1
 952 0456 1A60     		str	r2, [r3]
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 953              		.loc 1 748 21
 954 0458 FFF7FEFF 		bl	HAL_GetTick
 955 045c 3861     		str	r0, [r7, #16]
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is ready */
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 956              		.loc 1 751 14
 957 045e 08E0     		b	.L65
 958              	.L66:
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 959              		.loc 1 753 15
 960 0460 FFF7FEFF 		bl	HAL_GetTick
 961 0464 0246     		mov	r2, r0
 962              		.loc 1 753 29
 963 0466 3B69     		ldr	r3, [r7, #16]
 964 0468 D31A     		subs	r3, r2, r3
 965              		.loc 1 753 13
 966 046a 022B     		cmp	r3, #2
 967 046c 01D9     		bls	.L65
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 968              		.loc 1 755 20
 969 046e 0323     		movs	r3, #3
 970 0470 20E0     		b	.L19
 971              	.L65:
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 972              		.loc 1 751 15
 973 0472 124B     		ldr	r3, .L72
 974 0474 1B68     		ldr	r3, [r3]
 975 0476 03F00073 		and	r3, r3, #33554432
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 976              		.loc 1 751 14
 977 047a 002B     		cmp	r3, #0
 978 047c F0D0     		beq	.L66
 979 047e 18E0     		b	.L59
 980              	.L61:
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccQKe6VG.s 			page 32


 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 981              		.loc 1 762 9
 982 0480 104B     		ldr	r3, .L72+8
 983 0482 0022     		movs	r2, #0
 984 0484 1A60     		str	r2, [r3]
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 985              		.loc 1 765 21
 986 0486 FFF7FEFF 		bl	HAL_GetTick
 987 048a 3861     		str	r0, [r7, #16]
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */  
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 988              		.loc 1 768 14
 989 048c 08E0     		b	.L67
 990              	.L68:
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 991              		.loc 1 770 15
 992 048e FFF7FEFF 		bl	HAL_GetTick
 993 0492 0246     		mov	r2, r0
 994              		.loc 1 770 29
 995 0494 3B69     		ldr	r3, [r7, #16]
 996 0496 D31A     		subs	r3, r2, r3
 997              		.loc 1 770 13
 998 0498 022B     		cmp	r3, #2
 999 049a 01D9     		bls	.L67
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1000              		.loc 1 772 20
 1001 049c 0323     		movs	r3, #3
 1002 049e 09E0     		b	.L19
 1003              	.L67:
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 1004              		.loc 1 768 15
 1005 04a0 064B     		ldr	r3, .L72
 1006 04a2 1B68     		ldr	r3, [r3]
 1007 04a4 03F00073 		and	r3, r3, #33554432
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 1008              		.loc 1 768 14
 1009 04a8 002B     		cmp	r3, #0
 1010 04aa F0D1     		bne	.L68
 1011 04ac 01E0     		b	.L59
 1012              	.L60:
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 1013              		.loc 1 779 14
 1014 04ae 0123     		movs	r3, #1
ARM GAS  /tmp/ccQKe6VG.s 			page 33


 1015 04b0 00E0     		b	.L19
 1016              	.L59:
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 1017              		.loc 1 783 10
 1018 04b2 0023     		movs	r3, #0
 1019              	.L19:
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1020              		.loc 1 784 1
 1021 04b4 1846     		mov	r0, r3
 1022 04b6 1837     		adds	r7, r7, #24
 1023              	.LCFI8:
 1024              		.cfi_def_cfa_offset 8
 1025 04b8 BD46     		mov	sp, r7
 1026              	.LCFI9:
 1027              		.cfi_def_cfa_register 13
 1028              		@ sp needed
 1029 04ba 80BD     		pop	{r7, pc}
 1030              	.L73:
 1031              		.align	2
 1032              	.L72:
 1033 04bc 00100240 		.word	1073876992
 1034 04c0 00700040 		.word	1073770496
 1035 04c4 60004242 		.word	1111621728
 1036              		.cfi_endproc
 1037              	.LFE67:
 1039              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1040              		.align	1
 1041              		.global	HAL_RCC_ClockConfig
 1042              		.syntax unified
 1043              		.thumb
 1044              		.thumb_func
 1045              		.fpu softvfp
 1047              	HAL_RCC_ClockConfig:
 1048              	.LFB68:
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  FLatency FLASH Latency                   
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          The value of this parameter depend on device used within the same series
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
ARM GAS  /tmp/ccQKe6VG.s 			page 34


 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         currently used as system clock source.
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1049              		.loc 1 810 1
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 16
 1052              		@ frame_needed = 1, uses_anonymous_args = 0
 1053 0000 80B5     		push	{r7, lr}
 1054              	.LCFI10:
 1055              		.cfi_def_cfa_offset 8
 1056              		.cfi_offset 7, -8
 1057              		.cfi_offset 14, -4
 1058 0002 84B0     		sub	sp, sp, #16
 1059              	.LCFI11:
 1060              		.cfi_def_cfa_offset 24
 1061 0004 00AF     		add	r7, sp, #0
 1062              	.LCFI12:
 1063              		.cfi_def_cfa_register 7
 1064 0006 7860     		str	r0, [r7, #4]
 1065 0008 3960     		str	r1, [r7]
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart = 0U;
 1066              		.loc 1 811 12
 1067 000a 0023     		movs	r3, #0
 1068 000c FB60     		str	r3, [r7, #12]
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   must be correctly programmed according to the frequency of the CPU clock 
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     (HCLK) of the device. */
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 1069              		.loc 1 824 23
 1070 000e 7E4B     		ldr	r3, .L95
 1071 0010 1B68     		ldr	r3, [r3]
 1072              		.loc 1 824 29
 1073 0012 03F00703 		and	r3, r3, #7
 1074              		.loc 1 824 5
 1075 0016 3A68     		ldr	r2, [r7]
 1076 0018 9A42     		cmp	r2, r3
 1077 001a 10D9     		bls	.L75
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {    
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1078              		.loc 1 827 5
 1079 001c 7A4B     		ldr	r3, .L95
 1080 001e 1B68     		ldr	r3, [r3]
 1081 0020 23F00702 		bic	r2, r3, #7
 1082 0024 7849     		ldr	r1, .L95
ARM GAS  /tmp/ccQKe6VG.s 			page 35


 1083 0026 3B68     		ldr	r3, [r7]
 1084 0028 1343     		orrs	r3, r3, r2
 1085 002a 0B60     		str	r3, [r1]
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1086              		.loc 1 831 14
 1087 002c 764B     		ldr	r3, .L95
 1088 002e 1B68     		ldr	r3, [r3]
 1089              		.loc 1 831 20
 1090 0030 03F00703 		and	r3, r3, #7
 1091              		.loc 1 831 7
 1092 0034 3A68     		ldr	r2, [r7]
 1093 0036 9A42     		cmp	r2, r3
 1094 0038 01D0     		beq	.L75
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 1095              		.loc 1 833 14
 1096 003a 0123     		movs	r3, #1
 1097 003c E0E0     		b	.L76
 1098              	.L75:
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1099              		.loc 1 839 25
 1100 003e 7B68     		ldr	r3, [r7, #4]
 1101 0040 1B68     		ldr	r3, [r3]
 1102              		.loc 1 839 38
 1103 0042 03F00203 		and	r3, r3, #2
 1104              		.loc 1 839 5
 1105 0046 002B     		cmp	r3, #0
 1106 0048 20D0     		beq	.L77
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Set the highest APBx dividers in order to ensure that we do not go through
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     a non-spec phase whatever we decrease or increase HCLK. */
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1107              		.loc 1 843 27
 1108 004a 7B68     		ldr	r3, [r7, #4]
 1109 004c 1B68     		ldr	r3, [r3]
 1110              		.loc 1 843 40
 1111 004e 03F00403 		and	r3, r3, #4
 1112              		.loc 1 843 7
 1113 0052 002B     		cmp	r3, #0
 1114 0054 05D0     		beq	.L78
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 1115              		.loc 1 845 7
 1116 0056 6D4B     		ldr	r3, .L95+4
 1117 0058 5B68     		ldr	r3, [r3, #4]
 1118 005a 6C4A     		ldr	r2, .L95+4
 1119 005c 43F4E063 		orr	r3, r3, #1792
 1120 0060 5360     		str	r3, [r2, #4]
 1121              	.L78:
ARM GAS  /tmp/ccQKe6VG.s 			page 36


 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1122              		.loc 1 848 27
 1123 0062 7B68     		ldr	r3, [r7, #4]
 1124 0064 1B68     		ldr	r3, [r3]
 1125              		.loc 1 848 40
 1126 0066 03F00803 		and	r3, r3, #8
 1127              		.loc 1 848 7
 1128 006a 002B     		cmp	r3, #0
 1129 006c 05D0     		beq	.L79
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 1130              		.loc 1 850 7
 1131 006e 674B     		ldr	r3, .L95+4
 1132 0070 5B68     		ldr	r3, [r3, #4]
 1133 0072 664A     		ldr	r2, .L95+4
 1134 0074 43F46053 		orr	r3, r3, #14336
 1135 0078 5360     		str	r3, [r2, #4]
 1136              	.L79:
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Set the new HCLK clock divider */
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1137              		.loc 1 855 5
 1138 007a 644B     		ldr	r3, .L95+4
 1139 007c 5B68     		ldr	r3, [r3, #4]
 1140 007e 23F0F002 		bic	r2, r3, #240
 1141 0082 7B68     		ldr	r3, [r7, #4]
 1142 0084 9B68     		ldr	r3, [r3, #8]
 1143 0086 6149     		ldr	r1, .L95+4
 1144 0088 1343     		orrs	r3, r3, r2
 1145 008a 4B60     		str	r3, [r1, #4]
 1146              	.L77:
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1147              		.loc 1 859 25
 1148 008c 7B68     		ldr	r3, [r7, #4]
 1149 008e 1B68     		ldr	r3, [r3]
 1150              		.loc 1 859 38
 1151 0090 03F00103 		and	r3, r3, #1
 1152              		.loc 1 859 5
 1153 0094 002B     		cmp	r3, #0
 1154 0096 6AD0     		beq	.L80
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {    
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1155              		.loc 1 864 25
 1156 0098 7B68     		ldr	r3, [r7, #4]
 1157 009a 5B68     		ldr	r3, [r3, #4]
 1158              		.loc 1 864 7
 1159 009c 012B     		cmp	r3, #1
ARM GAS  /tmp/ccQKe6VG.s 			page 37


 1160 009e 07D1     		bne	.L81
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSE ready flag */  
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1161              		.loc 1 867 10
 1162 00a0 5A4B     		ldr	r3, .L95+4
 1163 00a2 1B68     		ldr	r3, [r3]
 1164 00a4 03F40033 		and	r3, r3, #131072
 1165              		.loc 1 867 9
 1166 00a8 002B     		cmp	r3, #0
 1167 00aa 15D1     		bne	.L82
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1168              		.loc 1 869 16
 1169 00ac 0123     		movs	r3, #1
 1170 00ae A7E0     		b	.L76
 1171              	.L81:
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1172              		.loc 1 873 30
 1173 00b0 7B68     		ldr	r3, [r7, #4]
 1174 00b2 5B68     		ldr	r3, [r3, #4]
 1175              		.loc 1 873 12
 1176 00b4 022B     		cmp	r3, #2
 1177 00b6 07D1     		bne	.L83
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the PLL ready flag */  
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1178              		.loc 1 876 10
 1179 00b8 544B     		ldr	r3, .L95+4
 1180 00ba 1B68     		ldr	r3, [r3]
 1181 00bc 03F00073 		and	r3, r3, #33554432
 1182              		.loc 1 876 9
 1183 00c0 002B     		cmp	r3, #0
 1184 00c2 09D1     		bne	.L82
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1185              		.loc 1 878 16
 1186 00c4 0123     		movs	r3, #1
 1187 00c6 9BE0     		b	.L76
 1188              	.L83:
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSI ready flag */  
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1189              		.loc 1 885 10
 1190 00c8 504B     		ldr	r3, .L95+4
 1191 00ca 1B68     		ldr	r3, [r3]
 1192 00cc 03F00203 		and	r3, r3, #2
 1193              		.loc 1 885 9
 1194 00d0 002B     		cmp	r3, #0
 1195 00d2 01D1     		bne	.L82
ARM GAS  /tmp/ccQKe6VG.s 			page 38


 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1196              		.loc 1 887 16
 1197 00d4 0123     		movs	r3, #1
 1198 00d6 93E0     		b	.L76
 1199              	.L82:
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 1200              		.loc 1 890 5
 1201 00d8 4C4B     		ldr	r3, .L95+4
 1202 00da 5B68     		ldr	r3, [r3, #4]
 1203 00dc 23F00302 		bic	r2, r3, #3
 1204 00e0 7B68     		ldr	r3, [r7, #4]
 1205 00e2 5B68     		ldr	r3, [r3, #4]
 1206 00e4 4949     		ldr	r1, .L95+4
 1207 00e6 1343     		orrs	r3, r3, r2
 1208 00e8 4B60     		str	r3, [r1, #4]
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Get Start Tick */
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 1209              		.loc 1 893 17
 1210 00ea FFF7FEFF 		bl	HAL_GetTick
 1211 00ee F860     		str	r0, [r7, #12]
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1212              		.loc 1 895 25
 1213 00f0 7B68     		ldr	r3, [r7, #4]
 1214 00f2 5B68     		ldr	r3, [r3, #4]
 1215              		.loc 1 895 7
 1216 00f4 012B     		cmp	r3, #1
 1217 00f6 12D1     		bne	.L84
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 1218              		.loc 1 897 13
 1219 00f8 0AE0     		b	.L85
 1220              	.L86:
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1221              		.loc 1 899 13
 1222 00fa FFF7FEFF 		bl	HAL_GetTick
 1223 00fe 0246     		mov	r2, r0
 1224              		.loc 1 899 27
 1225 0100 FB68     		ldr	r3, [r7, #12]
 1226 0102 D31A     		subs	r3, r2, r3
 1227              		.loc 1 899 11
 1228 0104 41F28832 		movw	r2, #5000
 1229 0108 9342     		cmp	r3, r2
 1230 010a 01D9     		bls	.L85
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1231              		.loc 1 901 18
 1232 010c 0323     		movs	r3, #3
 1233 010e 77E0     		b	.L76
 1234              	.L85:
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1235              		.loc 1 897 14
ARM GAS  /tmp/ccQKe6VG.s 			page 39


 1236 0110 3E4B     		ldr	r3, .L95+4
 1237 0112 5B68     		ldr	r3, [r3, #4]
 1238 0114 03F00C03 		and	r3, r3, #12
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1239              		.loc 1 897 13
 1240 0118 042B     		cmp	r3, #4
 1241 011a EED1     		bne	.L86
 1242 011c 27E0     		b	.L80
 1243              	.L84:
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1244              		.loc 1 905 30
 1245 011e 7B68     		ldr	r3, [r7, #4]
 1246 0120 5B68     		ldr	r3, [r3, #4]
 1247              		.loc 1 905 12
 1248 0122 022B     		cmp	r3, #2
 1249 0124 1DD1     		bne	.L90
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 1250              		.loc 1 907 13
 1251 0126 0AE0     		b	.L88
 1252              	.L89:
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1253              		.loc 1 909 13
 1254 0128 FFF7FEFF 		bl	HAL_GetTick
 1255 012c 0246     		mov	r2, r0
 1256              		.loc 1 909 27
 1257 012e FB68     		ldr	r3, [r7, #12]
 1258 0130 D31A     		subs	r3, r2, r3
 1259              		.loc 1 909 11
 1260 0132 41F28832 		movw	r2, #5000
 1261 0136 9342     		cmp	r3, r2
 1262 0138 01D9     		bls	.L88
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1263              		.loc 1 911 18
 1264 013a 0323     		movs	r3, #3
 1265 013c 60E0     		b	.L76
 1266              	.L88:
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1267              		.loc 1 907 14
 1268 013e 334B     		ldr	r3, .L95+4
 1269 0140 5B68     		ldr	r3, [r3, #4]
 1270 0142 03F00C03 		and	r3, r3, #12
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1271              		.loc 1 907 13
 1272 0146 082B     		cmp	r3, #8
 1273 0148 EED1     		bne	.L89
 1274 014a 10E0     		b	.L80
 1275              	.L91:
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
ARM GAS  /tmp/ccQKe6VG.s 			page 40


 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1276              		.loc 1 919 13
 1277 014c FFF7FEFF 		bl	HAL_GetTick
 1278 0150 0246     		mov	r2, r0
 1279              		.loc 1 919 27
 1280 0152 FB68     		ldr	r3, [r7, #12]
 1281 0154 D31A     		subs	r3, r2, r3
 1282              		.loc 1 919 11
 1283 0156 41F28832 		movw	r2, #5000
 1284 015a 9342     		cmp	r3, r2
 1285 015c 01D9     		bls	.L90
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1286              		.loc 1 921 18
 1287 015e 0323     		movs	r3, #3
 1288 0160 4EE0     		b	.L76
 1289              	.L90:
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1290              		.loc 1 917 14
 1291 0162 2A4B     		ldr	r3, .L95+4
 1292 0164 5B68     		ldr	r3, [r3, #4]
 1293 0166 03F00C03 		and	r3, r3, #12
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1294              		.loc 1 917 13
 1295 016a 002B     		cmp	r3, #0
 1296 016c EED1     		bne	.L91
 1297              	.L80:
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }      
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }    
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 1298              		.loc 1 928 23
 1299 016e 264B     		ldr	r3, .L95
 1300 0170 1B68     		ldr	r3, [r3]
 1301              		.loc 1 928 29
 1302 0172 03F00703 		and	r3, r3, #7
 1303              		.loc 1 928 5
 1304 0176 3A68     		ldr	r2, [r7]
 1305 0178 9A42     		cmp	r2, r3
 1306 017a 10D2     		bcs	.L92
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {    
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1307              		.loc 1 931 5
 1308 017c 224B     		ldr	r3, .L95
 1309 017e 1B68     		ldr	r3, [r3]
 1310 0180 23F00702 		bic	r2, r3, #7
 1311 0184 2049     		ldr	r1, .L95
 1312 0186 3B68     		ldr	r3, [r7]
 1313 0188 1343     		orrs	r3, r3, r2
 1314 018a 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccQKe6VG.s 			page 41


 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1315              		.loc 1 935 14
 1316 018c 1E4B     		ldr	r3, .L95
 1317 018e 1B68     		ldr	r3, [r3]
 1318              		.loc 1 935 20
 1319 0190 03F00703 		and	r3, r3, #7
 1320              		.loc 1 935 7
 1321 0194 3A68     		ldr	r2, [r7]
 1322 0196 9A42     		cmp	r2, r3
 1323 0198 01D0     		beq	.L92
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 1324              		.loc 1 937 14
 1325 019a 0123     		movs	r3, #1
 1326 019c 30E0     		b	.L76
 1327              	.L92:
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }    
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1328              		.loc 1 943 25
 1329 019e 7B68     		ldr	r3, [r7, #4]
 1330 01a0 1B68     		ldr	r3, [r3]
 1331              		.loc 1 943 38
 1332 01a2 03F00403 		and	r3, r3, #4
 1333              		.loc 1 943 5
 1334 01a6 002B     		cmp	r3, #0
 1335 01a8 08D0     		beq	.L93
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1336              		.loc 1 946 5
 1337 01aa 184B     		ldr	r3, .L95+4
 1338 01ac 5B68     		ldr	r3, [r3, #4]
 1339 01ae 23F4E062 		bic	r2, r3, #1792
 1340 01b2 7B68     		ldr	r3, [r7, #4]
 1341 01b4 DB68     		ldr	r3, [r3, #12]
 1342 01b6 1549     		ldr	r1, .L95+4
 1343 01b8 1343     		orrs	r3, r3, r2
 1344 01ba 4B60     		str	r3, [r1, #4]
 1345              	.L93:
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1346              		.loc 1 950 25
 1347 01bc 7B68     		ldr	r3, [r7, #4]
 1348 01be 1B68     		ldr	r3, [r3]
 1349              		.loc 1 950 38
 1350 01c0 03F00803 		and	r3, r3, #8
 1351              		.loc 1 950 5
 1352 01c4 002B     		cmp	r3, #0
ARM GAS  /tmp/ccQKe6VG.s 			page 42


 1353 01c6 09D0     		beq	.L94
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1354              		.loc 1 953 5
 1355 01c8 104B     		ldr	r3, .L95+4
 1356 01ca 5B68     		ldr	r3, [r3, #4]
 1357 01cc 23F46052 		bic	r2, r3, #14336
 1358 01d0 7B68     		ldr	r3, [r7, #4]
 1359 01d2 1B69     		ldr	r3, [r3, #16]
 1360 01d4 DB00     		lsls	r3, r3, #3
 1361 01d6 0D49     		ldr	r1, .L95+4
 1362 01d8 1343     		orrs	r3, r3, r2
 1363 01da 4B60     		str	r3, [r1, #4]
 1364              	.L94:
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CF
 1365              		.loc 1 957 21
 1366 01dc FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1367 01e0 0146     		mov	r1, r0
 1368              		.loc 1 957 68
 1369 01e2 0A4B     		ldr	r3, .L95+4
 1370 01e4 5B68     		ldr	r3, [r3, #4]
 1371              		.loc 1 957 91
 1372 01e6 1B09     		lsrs	r3, r3, #4
 1373 01e8 03F00F03 		and	r3, r3, #15
 1374              		.loc 1 957 63
 1375 01ec 084A     		ldr	r2, .L95+8
 1376 01ee D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1377              		.loc 1 957 47
 1378 01f0 21FA03F3 		lsr	r3, r1, r3
 1379              		.loc 1 957 19
 1380 01f4 074A     		ldr	r2, .L95+12
 1381 01f6 1360     		str	r3, [r2]
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1382              		.loc 1 960 3
 1383 01f8 0020     		movs	r0, #0
 1384 01fa FFF7FEFF 		bl	HAL_InitTick
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 1385              		.loc 1 962 10
 1386 01fe 0023     		movs	r3, #0
 1387              	.L76:
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1388              		.loc 1 963 1
 1389 0200 1846     		mov	r0, r3
 1390 0202 1037     		adds	r7, r7, #16
 1391              	.LCFI13:
 1392              		.cfi_def_cfa_offset 8
 1393 0204 BD46     		mov	sp, r7
 1394              	.LCFI14:
 1395              		.cfi_def_cfa_register 13
 1396              		@ sp needed
ARM GAS  /tmp/ccQKe6VG.s 			page 43


 1397 0206 80BD     		pop	{r7, pc}
 1398              	.L96:
 1399              		.align	2
 1400              	.L95:
 1401 0208 00200240 		.word	1073881088
 1402 020c 00100240 		.word	1073876992
 1403 0210 00000000 		.word	AHBPrescTable
 1404 0214 00000000 		.word	SystemCoreClock
 1405              		.cfi_endproc
 1406              	.LFE68:
 1408              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1409              		.align	1
 1410              		.global	HAL_RCC_MCOConfig
 1411              		.syntax unified
 1412              		.thumb
 1413              		.thumb_func
 1414              		.fpu softvfp
 1416              	HAL_RCC_MCOConfig:
 1417              	.LFB69:
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *  @brief   RCC clocks control functions
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim   
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                   ##### Peripheral Control functions #####
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================  
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     frequencies.
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   MCO pin should be configured in alternate function mode.
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1 Clock source to output on MCO1 pin(PA8).
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_NOCLOCK     No clock selected as MCO clock
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_SYSCLK      System clock selected as MCO clock
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI         HSI selected as MCO clock
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSE         HSE selected as MCO clock
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @if STM32F105xC
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE      XT1 external 3-25 MHz oscillator clock selecte
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
ARM GAS  /tmp/ccQKe6VG.s 			page 44


1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endif
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @if STM32F107xC
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE XT1  external 3-25 MHz oscillator clock selected as
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endif
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCO DIV.
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1418              		.loc 1 1016 1
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 40
 1421              		@ frame_needed = 1, uses_anonymous_args = 0
 1422 0000 80B5     		push	{r7, lr}
 1423              	.LCFI15:
 1424              		.cfi_def_cfa_offset 8
 1425              		.cfi_offset 7, -8
 1426              		.cfi_offset 14, -4
 1427 0002 8AB0     		sub	sp, sp, #40
 1428              	.LCFI16:
 1429              		.cfi_def_cfa_offset 48
 1430 0004 00AF     		add	r7, sp, #0
 1431              	.LCFI17:
 1432              		.cfi_def_cfa_register 7
 1433 0006 F860     		str	r0, [r7, #12]
 1434 0008 B960     		str	r1, [r7, #8]
 1435 000a 7A60     		str	r2, [r7, #4]
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
 1436              		.loc 1 1017 20
 1437 000c 07F11803 		add	r3, r7, #24
 1438 0010 0022     		movs	r2, #0
 1439 0012 1A60     		str	r2, [r3]
 1440 0014 5A60     		str	r2, [r3, #4]
 1441 0016 9A60     		str	r2, [r3, #8]
 1442 0018 DA60     		str	r2, [r3, #12]
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Prevent unused argument(s) compilation warning */
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCOx);
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCODiv);
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO1 pin in alternate function mode */
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Mode      = GPIO_MODE_AF_PP;
 1443              		.loc 1 1029 18
 1444 001a 0223     		movs	r3, #2
 1445 001c FB61     		str	r3, [r7, #28]
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
ARM GAS  /tmp/ccQKe6VG.s 			page 45


 1446              		.loc 1 1030 18
 1447 001e 0323     		movs	r3, #3
 1448 0020 7B62     		str	r3, [r7, #36]
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Pull      = GPIO_NOPULL;
 1449              		.loc 1 1031 18
 1450 0022 0023     		movs	r3, #0
 1451 0024 3B62     		str	r3, [r7, #32]
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Pin       = MCO1_PIN;
 1452              		.loc 1 1032 18
 1453 0026 4FF48073 		mov	r3, #256
 1454 002a BB61     		str	r3, [r7, #24]
 1455              	.LBB6:
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* MCO1 Clock Enable */
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   MCO1_CLK_ENABLE();
 1456              		.loc 1 1035 3
 1457 002c 0E4B     		ldr	r3, .L98
 1458 002e 9B69     		ldr	r3, [r3, #24]
 1459 0030 0D4A     		ldr	r2, .L98
 1460 0032 43F00403 		orr	r3, r3, #4
 1461 0036 9361     		str	r3, [r2, #24]
 1462 0038 0B4B     		ldr	r3, .L98
 1463 003a 9B69     		ldr	r3, [r3, #24]
 1464 003c 03F00403 		and	r3, r3, #4
 1465 0040 7B61     		str	r3, [r7, #20]
 1466 0042 7B69     		ldr	r3, [r7, #20]
 1467              	.LBE6:
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 1468              		.loc 1 1037 3
 1469 0044 07F11803 		add	r3, r7, #24
 1470 0048 1946     		mov	r1, r3
 1471 004a 0848     		ldr	r0, .L98+4
 1472 004c FFF7FEFF 		bl	HAL_GPIO_Init
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO clock source */
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 1473              		.loc 1 1040 3
 1474 0050 054B     		ldr	r3, .L98
 1475 0052 5B68     		ldr	r3, [r3, #4]
 1476 0054 23F0E062 		bic	r2, r3, #117440512
 1477 0058 0349     		ldr	r1, .L98
 1478 005a BB68     		ldr	r3, [r7, #8]
 1479 005c 1343     		orrs	r3, r3, r2
 1480 005e 4B60     		str	r3, [r1, #4]
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1481              		.loc 1 1041 1
 1482 0060 00BF     		nop
 1483 0062 2837     		adds	r7, r7, #40
 1484              	.LCFI18:
 1485              		.cfi_def_cfa_offset 8
 1486 0064 BD46     		mov	sp, r7
 1487              	.LCFI19:
 1488              		.cfi_def_cfa_register 13
 1489              		@ sp needed
 1490 0066 80BD     		pop	{r7, pc}
 1491              	.L99:
ARM GAS  /tmp/ccQKe6VG.s 			page 46


 1492              		.align	2
 1493              	.L98:
 1494 0068 00100240 		.word	1073876992
 1495 006c 00080140 		.word	1073809408
 1496              		.cfi_endproc
 1497              	.LFE69:
 1499              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1500              		.align	1
 1501              		.global	HAL_RCC_EnableCSS
 1502              		.syntax unified
 1503              		.thumb
 1504              		.thumb_func
 1505              		.fpu softvfp
 1507              	HAL_RCC_EnableCSS:
 1508              	.LFB70:
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1509              		.loc 1 1053 1
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 0
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513              		@ link register save eliminated.
 1514 0000 80B4     		push	{r7}
 1515              	.LCFI20:
 1516              		.cfi_def_cfa_offset 4
 1517              		.cfi_offset 7, -4
 1518 0002 00AF     		add	r7, sp, #0
 1519              	.LCFI21:
 1520              		.cfi_def_cfa_register 7
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 1521              		.loc 1 1054 3
 1522 0004 034B     		ldr	r3, .L101
 1523              		.loc 1 1054 38
 1524 0006 0122     		movs	r2, #1
 1525 0008 1A60     		str	r2, [r3]
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1526              		.loc 1 1055 1
 1527 000a 00BF     		nop
 1528 000c BD46     		mov	sp, r7
 1529              	.LCFI22:
 1530              		.cfi_def_cfa_register 13
 1531              		@ sp needed
 1532 000e 80BC     		pop	{r7}
 1533              	.LCFI23:
 1534              		.cfi_restore 7
 1535              		.cfi_def_cfa_offset 0
 1536 0010 7047     		bx	lr
ARM GAS  /tmp/ccQKe6VG.s 			page 47


 1537              	.L102:
 1538 0012 00BF     		.align	2
 1539              	.L101:
 1540 0014 4C004242 		.word	1111621708
 1541              		.cfi_endproc
 1542              	.LFE70:
 1544              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1545              		.align	1
 1546              		.global	HAL_RCC_DisableCSS
 1547              		.syntax unified
 1548              		.thumb
 1549              		.thumb_func
 1550              		.fpu softvfp
 1552              	HAL_RCC_DisableCSS:
 1553              	.LFB71:
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1554              		.loc 1 1062 1
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 0
 1557              		@ frame_needed = 1, uses_anonymous_args = 0
 1558              		@ link register save eliminated.
 1559 0000 80B4     		push	{r7}
 1560              	.LCFI24:
 1561              		.cfi_def_cfa_offset 4
 1562              		.cfi_offset 7, -4
 1563 0002 00AF     		add	r7, sp, #0
 1564              	.LCFI25:
 1565              		.cfi_def_cfa_register 7
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 1566              		.loc 1 1063 3
 1567 0004 034B     		ldr	r3, .L104
 1568              		.loc 1 1063 38
 1569 0006 0022     		movs	r2, #0
 1570 0008 1A60     		str	r2, [r3]
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1571              		.loc 1 1064 1
 1572 000a 00BF     		nop
 1573 000c BD46     		mov	sp, r7
 1574              	.LCFI26:
 1575              		.cfi_def_cfa_register 13
 1576              		@ sp needed
 1577 000e 80BC     		pop	{r7}
 1578              	.LCFI27:
 1579              		.cfi_restore 7
 1580              		.cfi_def_cfa_offset 0
 1581 0010 7047     		bx	lr
 1582              	.L105:
 1583 0012 00BF     		.align	2
 1584              	.L104:
 1585 0014 4C004242 		.word	1111621708
 1586              		.cfi_endproc
ARM GAS  /tmp/ccQKe6VG.s 			page 48


 1587              	.LFE71:
 1589              		.section	.rodata
 1590              		.align	2
 1591              	.LC0:
 1592 0000 02       		.byte	2
 1593 0001 03       		.byte	3
 1594 0002 04       		.byte	4
 1595 0003 05       		.byte	5
 1596 0004 06       		.byte	6
 1597 0005 07       		.byte	7
 1598 0006 08       		.byte	8
 1599 0007 09       		.byte	9
 1600 0008 0A       		.byte	10
 1601 0009 0B       		.byte	11
 1602 000a 0C       		.byte	12
 1603 000b 0D       		.byte	13
 1604 000c 0E       		.byte	14
 1605 000d 0F       		.byte	15
 1606 000e 10       		.byte	16
 1607 000f 10       		.byte	16
 1608              		.align	2
 1609              	.LC1:
 1610 0010 01       		.byte	1
 1611 0011 02       		.byte	2
 1612              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1613              		.align	1
 1614              		.global	HAL_RCC_GetSysClockFreq
 1615              		.syntax unified
 1616              		.thumb
 1617              		.thumb_func
 1618              		.fpu softvfp
 1620              	HAL_RCC_GetSysClockFreq:
 1621              	.LFB72:
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency     
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         constant and the selected clock source:
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns a value based on HSE_VALUE
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**)
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns a value based on HSE_VALUE
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**) or HSI_VALUE(*) multiplied by the PLL factor.
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *               in voltage and temperature.
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                have wrong result.
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                  
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         value for HSE crystal.
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         baud-rate for the communication peripherals or configure other parameters.
ARM GAS  /tmp/ccQKe6VG.s 			page 49


1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval SYSCLK frequency
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1622              		.loc 1 1096 1
 1623              		.cfi_startproc
 1624              		@ args = 0, pretend = 0, frame = 40
 1625              		@ frame_needed = 1, uses_anonymous_args = 0
 1626              		@ link register save eliminated.
 1627 0000 90B4     		push	{r4, r7}
 1628              	.LCFI28:
 1629              		.cfi_def_cfa_offset 8
 1630              		.cfi_offset 4, -8
 1631              		.cfi_offset 7, -4
 1632 0002 8AB0     		sub	sp, sp, #40
 1633              	.LCFI29:
 1634              		.cfi_def_cfa_offset 48
 1635 0004 00AF     		add	r7, sp, #0
 1636              	.LCFI30:
 1637              		.cfi_def_cfa_register 7
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 1638              		.loc 1 1101 17
 1639 0006 2A4B     		ldr	r3, .L115
 1640 0008 3C1D     		adds	r4, r7, #4
 1641 000a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1642 000c 84E80F00 		stm	r4, {r0, r1, r2, r3}
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[2] = {1, 2};
 1643              		.loc 1 1105 17
 1644 0010 284B     		ldr	r3, .L115+4
 1645 0012 1B88     		ldrh	r3, [r3]	@ movhi
 1646 0014 3B80     		strh	r3, [r7]	@ movhi
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 1647              		.loc 1 1109 12
 1648 0016 0023     		movs	r3, #0
 1649 0018 FB61     		str	r3, [r7, #28]
 1650              		.loc 1 1109 25
 1651 001a 0023     		movs	r3, #0
 1652 001c BB61     		str	r3, [r7, #24]
 1653              		.loc 1 1109 38
 1654 001e 0023     		movs	r3, #0
 1655 0020 7B62     		str	r3, [r7, #36]
 1656              		.loc 1 1109 51
 1657 0022 0023     		movs	r3, #0
ARM GAS  /tmp/ccQKe6VG.s 			page 50


 1658 0024 7B61     		str	r3, [r7, #20]
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
 1659              		.loc 1 1110 12
 1660 0026 0023     		movs	r3, #0
 1661 0028 3B62     		str	r3, [r7, #32]
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t prediv2 = 0U, pll2mul = 0U;
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tmpreg = RCC->CFGR;
 1662              		.loc 1 1115 15
 1663 002a 234B     		ldr	r3, .L115+8
 1664              		.loc 1 1115 10
 1665 002c 5B68     		ldr	r3, [r3, #4]
 1666 002e FB61     		str	r3, [r7, #28]
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   switch (tmpreg & RCC_CFGR_SWS)
 1667              		.loc 1 1118 18
 1668 0030 FB69     		ldr	r3, [r7, #28]
 1669 0032 03F00C03 		and	r3, r3, #12
 1670              		.loc 1 1118 3
 1671 0036 042B     		cmp	r3, #4
 1672 0038 02D0     		beq	.L107
 1673 003a 082B     		cmp	r3, #8
 1674 003c 03D0     		beq	.L108
 1675 003e 2DE0     		b	.L114
 1676              	.L107:
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1677              		.loc 1 1122 20
 1678 0040 1E4B     		ldr	r3, .L115+12
 1679 0042 3B62     		str	r3, [r7, #32]
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1680              		.loc 1 1123 7
 1681 0044 2DE0     		b	.L110
 1682              	.L108:
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 1683              		.loc 1 1127 73
 1684 0046 FB69     		ldr	r3, [r7, #28]
 1685 0048 9B0C     		lsrs	r3, r3, #18
 1686 004a 03F00F03 		and	r3, r3, #15
 1687              		.loc 1 1127 34
 1688 004e 07F12802 		add	r2, r7, #40
 1689 0052 1344     		add	r3, r3, r2
 1690 0054 13F8243C 		ldrb	r3, [r3, #-36]	@ zero_extendqisi2
 1691              		.loc 1 1127 14
 1692 0058 7B61     		str	r3, [r7, #20]
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 1693              		.loc 1 1128 19
 1694 005a FB69     		ldr	r3, [r7, #28]
 1695 005c 03F48033 		and	r3, r3, #65536
ARM GAS  /tmp/ccQKe6VG.s 			page 51


 1696              		.loc 1 1128 10
 1697 0060 002B     		cmp	r3, #0
 1698 0062 13D0     		beq	.L111
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_
 1699              		.loc 1 1133 51
 1700 0064 144B     		ldr	r3, .L115+8
 1701 0066 5B68     		ldr	r3, [r3, #4]
 1702              		.loc 1 1133 79
 1703 0068 5B0C     		lsrs	r3, r3, #17
 1704 006a 03F00103 		and	r3, r3, #1
 1705              		.loc 1 1133 36
 1706 006e 07F12802 		add	r2, r7, #40
 1707 0072 1344     		add	r3, r3, r2
 1708 0074 13F8283C 		ldrb	r3, [r3, #-40]	@ zero_extendqisi2
 1709              		.loc 1 1133 16
 1710 0078 BB61     		str	r3, [r7, #24]
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* PLL2 selected as Prediv1 source */
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         else
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using floa
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* In this case need to divide pllclk by 2 */
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             pllclk = pllclk / 2;
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 1711              		.loc 1 1159 41
 1712 007a 7B69     		ldr	r3, [r7, #20]
 1713 007c 0F4A     		ldr	r2, .L115+12
 1714 007e 02FB03F2 		mul	r2, r2, r3
 1715              		.loc 1 1159 16
 1716 0082 BB69     		ldr	r3, [r7, #24]
 1717 0084 B2FBF3F3 		udiv	r3, r2, r3
 1718 0088 7B62     		str	r3, [r7, #36]
 1719 008a 04E0     		b	.L112
 1720              	.L111:
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
ARM GAS  /tmp/ccQKe6VG.s 			page 52


1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 1721              		.loc 1 1165 16
 1722 008c 7B69     		ldr	r3, [r7, #20]
 1723 008e 0C4A     		ldr	r2, .L115+16
 1724 0090 02FB03F3 		mul	r3, r2, r3
 1725 0094 7B62     		str	r3, [r7, #36]
 1726              	.L112:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = pllclk;
 1727              		.loc 1 1167 20
 1728 0096 7B6A     		ldr	r3, [r7, #36]
 1729 0098 3B62     		str	r3, [r7, #32]
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1730              		.loc 1 1168 7
 1731 009a 02E0     		b	.L110
 1732              	.L114:
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     default: /* HSI used as system clock */
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1733              		.loc 1 1173 20
 1734 009c 074B     		ldr	r3, .L115+12
 1735 009e 3B62     		str	r3, [r7, #32]
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1736              		.loc 1 1174 7
 1737 00a0 00BF     		nop
 1738              	.L110:
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return sysclockfreq;
 1739              		.loc 1 1177 10
 1740 00a2 3B6A     		ldr	r3, [r7, #32]
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1741              		.loc 1 1178 1
 1742 00a4 1846     		mov	r0, r3
 1743 00a6 2837     		adds	r7, r7, #40
 1744              	.LCFI31:
 1745              		.cfi_def_cfa_offset 8
 1746 00a8 BD46     		mov	sp, r7
 1747              	.LCFI32:
 1748              		.cfi_def_cfa_register 13
 1749              		@ sp needed
 1750 00aa 90BC     		pop	{r4, r7}
 1751              	.LCFI33:
 1752              		.cfi_restore 7
 1753              		.cfi_restore 4
 1754              		.cfi_def_cfa_offset 0
 1755 00ac 7047     		bx	lr
 1756              	.L116:
 1757 00ae 00BF     		.align	2
 1758              	.L115:
 1759 00b0 00000000 		.word	.LC0
ARM GAS  /tmp/ccQKe6VG.s 			page 53


 1760 00b4 10000000 		.word	.LC1
 1761 00b8 00100240 		.word	1073876992
 1762 00bc 00127A00 		.word	8000000
 1763 00c0 00093D00 		.word	4000000
 1764              		.cfi_endproc
 1765              	.LFE72:
 1767              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1768              		.align	1
 1769              		.global	HAL_RCC_GetHCLKFreq
 1770              		.syntax unified
 1771              		.thumb
 1772              		.thumb_func
 1773              		.fpu softvfp
 1775              	HAL_RCC_GetHCLKFreq:
 1776              	.LFB73:
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * 
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         and updated within this function
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HCLK frequency
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1777              		.loc 1 1190 1
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 0
 1780              		@ frame_needed = 1, uses_anonymous_args = 0
 1781              		@ link register save eliminated.
 1782 0000 80B4     		push	{r7}
 1783              	.LCFI34:
 1784              		.cfi_def_cfa_offset 4
 1785              		.cfi_offset 7, -4
 1786 0002 00AF     		add	r7, sp, #0
 1787              	.LCFI35:
 1788              		.cfi_def_cfa_register 7
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return SystemCoreClock;
 1789              		.loc 1 1191 10
 1790 0004 024B     		ldr	r3, .L119
 1791 0006 1B68     		ldr	r3, [r3]
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1792              		.loc 1 1192 1
 1793 0008 1846     		mov	r0, r3
 1794 000a BD46     		mov	sp, r7
 1795              	.LCFI36:
 1796              		.cfi_def_cfa_register 13
 1797              		@ sp needed
 1798 000c 80BC     		pop	{r7}
 1799              	.LCFI37:
 1800              		.cfi_restore 7
 1801              		.cfi_def_cfa_offset 0
 1802 000e 7047     		bx	lr
 1803              	.L120:
 1804              		.align	2
ARM GAS  /tmp/ccQKe6VG.s 			page 54


 1805              	.L119:
 1806 0010 00000000 		.word	SystemCoreClock
 1807              		.cfi_endproc
 1808              	.LFE73:
 1810              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1811              		.align	1
 1812              		.global	HAL_RCC_GetPCLK1Freq
 1813              		.syntax unified
 1814              		.thumb
 1815              		.thumb_func
 1816              		.fpu softvfp
 1818              	HAL_RCC_GetPCLK1Freq:
 1819              	.LFB74:
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval PCLK1 frequency
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1820              		.loc 1 1201 1
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 0
 1823              		@ frame_needed = 1, uses_anonymous_args = 0
 1824 0000 80B5     		push	{r7, lr}
 1825              	.LCFI38:
 1826              		.cfi_def_cfa_offset 8
 1827              		.cfi_offset 7, -8
 1828              		.cfi_offset 14, -4
 1829 0002 00AF     		add	r7, sp, #0
 1830              	.LCFI39:
 1831              		.cfi_def_cfa_register 7
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos
 1832              		.loc 1 1203 11
 1833 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1834 0008 0146     		mov	r1, r0
 1835              		.loc 1 1203 54
 1836 000a 054B     		ldr	r3, .L123
 1837 000c 5B68     		ldr	r3, [r3, #4]
 1838              		.loc 1 1203 79
 1839 000e 1B0A     		lsrs	r3, r3, #8
 1840 0010 03F00703 		and	r3, r3, #7
 1841              		.loc 1 1203 49
 1842 0014 034A     		ldr	r2, .L123+4
 1843 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1844              		.loc 1 1203 33
 1845 0018 21FA03F3 		lsr	r3, r1, r3
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }    
 1846              		.loc 1 1204 1
 1847 001c 1846     		mov	r0, r3
 1848 001e 80BD     		pop	{r7, pc}
 1849              	.L124:
 1850              		.align	2
 1851              	.L123:
ARM GAS  /tmp/ccQKe6VG.s 			page 55


 1852 0020 00100240 		.word	1073876992
 1853 0024 00000000 		.word	APBPrescTable
 1854              		.cfi_endproc
 1855              	.LFE74:
 1857              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1858              		.align	1
 1859              		.global	HAL_RCC_GetPCLK2Freq
 1860              		.syntax unified
 1861              		.thumb
 1862              		.thumb_func
 1863              		.fpu softvfp
 1865              	HAL_RCC_GetPCLK2Freq:
 1866              	.LFB75:
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval PCLK2 frequency
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1867              		.loc 1 1213 1
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 0
 1870              		@ frame_needed = 1, uses_anonymous_args = 0
 1871 0000 80B5     		push	{r7, lr}
 1872              	.LCFI40:
 1873              		.cfi_def_cfa_offset 8
 1874              		.cfi_offset 7, -8
 1875              		.cfi_offset 14, -4
 1876 0002 00AF     		add	r7, sp, #0
 1877              	.LCFI41:
 1878              		.cfi_def_cfa_register 7
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]
 1879              		.loc 1 1215 11
 1880 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1881 0008 0146     		mov	r1, r0
 1882              		.loc 1 1215 53
 1883 000a 054B     		ldr	r3, .L127
 1884 000c 5B68     		ldr	r3, [r3, #4]
 1885              		.loc 1 1215 78
 1886 000e DB0A     		lsrs	r3, r3, #11
 1887 0010 03F00703 		and	r3, r3, #7
 1888              		.loc 1 1215 48
 1889 0014 034A     		ldr	r2, .L127+4
 1890 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1891              		.loc 1 1215 32
 1892 0018 21FA03F3 		lsr	r3, r1, r3
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** } 
 1893              		.loc 1 1216 1
 1894 001c 1846     		mov	r0, r3
 1895 001e 80BD     		pop	{r7, pc}
 1896              	.L128:
 1897              		.align	2
 1898              	.L127:
ARM GAS  /tmp/ccQKe6VG.s 			page 56


 1899 0020 00100240 		.word	1073876992
 1900 0024 00000000 		.word	APBPrescTable
 1901              		.cfi_endproc
 1902              	.LFE75:
 1904              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1905              		.align	1
 1906              		.global	HAL_RCC_GetOscConfig
 1907              		.syntax unified
 1908              		.thumb
 1909              		.thumb_func
 1910              		.fpu softvfp
 1912              	HAL_RCC_GetOscConfig:
 1913              	.LFB76:
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * will be configured.
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1914              		.loc 1 1226 1
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 8
 1917              		@ frame_needed = 1, uses_anonymous_args = 0
 1918              		@ link register save eliminated.
 1919 0000 80B4     		push	{r7}
 1920              	.LCFI42:
 1921              		.cfi_def_cfa_offset 4
 1922              		.cfi_offset 7, -4
 1923 0002 83B0     		sub	sp, sp, #12
 1924              	.LCFI43:
 1925              		.cfi_def_cfa_offset 16
 1926 0004 00AF     		add	r7, sp, #0
 1927              	.LCFI44:
 1928              		.cfi_def_cfa_register 7
 1929 0006 7860     		str	r0, [r7, #4]
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 1930              		.loc 1 1231 37
 1931 0008 7B68     		ldr	r3, [r7, #4]
 1932 000a 0F22     		movs	r2, #15
 1933 000c 1A60     		str	r2, [r3]
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                   | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the Prediv1 source --------------------------------------------------*/
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
ARM GAS  /tmp/ccQKe6VG.s 			page 57


 1934              		.loc 1 1240 10
 1935 000e 3C4B     		ldr	r3, .L142
 1936 0010 1B68     		ldr	r3, [r3]
 1937              		.loc 1 1240 15
 1938 0012 03F48023 		and	r3, r3, #262144
 1939              		.loc 1 1240 5
 1940 0016 B3F5802F 		cmp	r3, #262144
 1941 001a 04D1     		bne	.L130
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1942              		.loc 1 1242 33
 1943 001c 7B68     		ldr	r3, [r7, #4]
 1944 001e 4FF4A022 		mov	r2, #327680
 1945 0022 5A60     		str	r2, [r3, #4]
 1946 0024 0EE0     		b	.L131
 1947              	.L130:
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 1948              		.loc 1 1244 15
 1949 0026 364B     		ldr	r3, .L142
 1950 0028 1B68     		ldr	r3, [r3]
 1951              		.loc 1 1244 20
 1952 002a 03F48033 		and	r3, r3, #65536
 1953              		.loc 1 1244 10
 1954 002e B3F5803F 		cmp	r3, #65536
 1955 0032 04D1     		bne	.L132
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 1956              		.loc 1 1246 33
 1957 0034 7B68     		ldr	r3, [r7, #4]
 1958 0036 4FF48032 		mov	r2, #65536
 1959 003a 5A60     		str	r2, [r3, #4]
 1960 003c 02E0     		b	.L131
 1961              	.L132:
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1962              		.loc 1 1250 33
 1963 003e 7B68     		ldr	r3, [r7, #4]
 1964 0040 0022     		movs	r2, #0
 1965 0042 5A60     		str	r2, [r3, #4]
 1966              	.L131:
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 1967              		.loc 1 1252 39
 1968 0044 2E4B     		ldr	r3, .L142
 1969 0046 5B68     		ldr	r3, [r3, #4]
 1970 0048 03F40032 		and	r2, r3, #131072
 1971              		.loc 1 1252 37
 1972 004c 7B68     		ldr	r3, [r7, #4]
 1973 004e 9A60     		str	r2, [r3, #8]
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1974              		.loc 1 1255 10
 1975 0050 2B4B     		ldr	r3, .L142
ARM GAS  /tmp/ccQKe6VG.s 			page 58


 1976 0052 1B68     		ldr	r3, [r3]
 1977              		.loc 1 1255 15
 1978 0054 03F00103 		and	r3, r3, #1
 1979              		.loc 1 1255 5
 1980 0058 012B     		cmp	r3, #1
 1981 005a 03D1     		bne	.L133
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1982              		.loc 1 1257 33
 1983 005c 7B68     		ldr	r3, [r7, #4]
 1984 005e 0122     		movs	r2, #1
 1985 0060 1A61     		str	r2, [r3, #16]
 1986 0062 02E0     		b	.L134
 1987              	.L133:
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1988              		.loc 1 1261 33
 1989 0064 7B68     		ldr	r3, [r7, #4]
 1990 0066 0022     		movs	r2, #0
 1991 0068 1A61     		str	r2, [r3, #16]
 1992              	.L134:
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_
 1993              		.loc 1 1264 59
 1994 006a 254B     		ldr	r3, .L142
 1995 006c 1B68     		ldr	r3, [r3]
 1996              		.loc 1 1264 44
 1997 006e DB08     		lsrs	r3, r3, #3
 1998 0070 03F01F02 		and	r2, r3, #31
 1999              		.loc 1 1264 42
 2000 0074 7B68     		ldr	r3, [r7, #4]
 2001 0076 5A61     		str	r2, [r3, #20]
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 2002              		.loc 1 1267 10
 2003 0078 214B     		ldr	r3, .L142
 2004 007a 1B6A     		ldr	r3, [r3, #32]
 2005              		.loc 1 1267 17
 2006 007c 03F00403 		and	r3, r3, #4
 2007              		.loc 1 1267 5
 2008 0080 042B     		cmp	r3, #4
 2009 0082 03D1     		bne	.L135
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 2010              		.loc 1 1269 33
 2011 0084 7B68     		ldr	r3, [r7, #4]
 2012 0086 0522     		movs	r2, #5
 2013 0088 DA60     		str	r2, [r3, #12]
 2014 008a 0CE0     		b	.L136
 2015              	.L135:
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 2016              		.loc 1 1271 15
ARM GAS  /tmp/ccQKe6VG.s 			page 59


 2017 008c 1C4B     		ldr	r3, .L142
 2018 008e 1B6A     		ldr	r3, [r3, #32]
 2019              		.loc 1 1271 22
 2020 0090 03F00103 		and	r3, r3, #1
 2021              		.loc 1 1271 10
 2022 0094 012B     		cmp	r3, #1
 2023 0096 03D1     		bne	.L137
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 2024              		.loc 1 1273 33
 2025 0098 7B68     		ldr	r3, [r7, #4]
 2026 009a 0122     		movs	r2, #1
 2027 009c DA60     		str	r2, [r3, #12]
 2028 009e 02E0     		b	.L136
 2029              	.L137:
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 2030              		.loc 1 1277 33
 2031 00a0 7B68     		ldr	r3, [r7, #4]
 2032 00a2 0022     		movs	r2, #0
 2033 00a4 DA60     		str	r2, [r3, #12]
 2034              	.L136:
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 2035              		.loc 1 1281 10
 2036 00a6 164B     		ldr	r3, .L142
 2037 00a8 5B6A     		ldr	r3, [r3, #36]
 2038              		.loc 1 1281 16
 2039 00aa 03F00103 		and	r3, r3, #1
 2040              		.loc 1 1281 5
 2041 00ae 012B     		cmp	r3, #1
 2042 00b0 03D1     		bne	.L138
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 2043              		.loc 1 1283 33
 2044 00b2 7B68     		ldr	r3, [r7, #4]
 2045 00b4 0122     		movs	r2, #1
 2046 00b6 9A61     		str	r2, [r3, #24]
 2047 00b8 02E0     		b	.L139
 2048              	.L138:
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 2049              		.loc 1 1287 33
 2050 00ba 7B68     		ldr	r3, [r7, #4]
 2051 00bc 0022     		movs	r2, #0
 2052 00be 9A61     		str	r2, [r3, #24]
 2053              	.L139:
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
ARM GAS  /tmp/ccQKe6VG.s 			page 60


1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 2054              		.loc 1 1292 10
 2055 00c0 0F4B     		ldr	r3, .L142
 2056 00c2 1B68     		ldr	r3, [r3]
 2057              		.loc 1 1292 15
 2058 00c4 03F08073 		and	r3, r3, #16777216
 2059              		.loc 1 1292 5
 2060 00c8 B3F1807F 		cmp	r3, #16777216
 2061 00cc 03D1     		bne	.L140
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 2062              		.loc 1 1294 37
 2063 00ce 7B68     		ldr	r3, [r7, #4]
 2064 00d0 0222     		movs	r2, #2
 2065 00d2 DA61     		str	r2, [r3, #28]
 2066 00d4 02E0     		b	.L141
 2067              	.L140:
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 2068              		.loc 1 1298 37
 2069 00d6 7B68     		ldr	r3, [r7, #4]
 2070 00d8 0122     		movs	r2, #1
 2071 00da DA61     		str	r2, [r3, #28]
 2072              	.L141:
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 2073              		.loc 1 1300 52
 2074 00dc 084B     		ldr	r3, .L142
 2075 00de 5B68     		ldr	r3, [r3, #4]
 2076              		.loc 1 1300 38
 2077 00e0 03F48032 		and	r2, r3, #65536
 2078              		.loc 1 1300 36
 2079 00e4 7B68     		ldr	r3, [r7, #4]
 2080 00e6 1A62     		str	r2, [r3, #32]
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 2081              		.loc 1 1301 49
 2082 00e8 054B     		ldr	r3, .L142
 2083 00ea 5B68     		ldr	r3, [r3, #4]
 2084              		.loc 1 1301 35
 2085 00ec 03F47012 		and	r2, r3, #3932160
 2086              		.loc 1 1301 33
 2087 00f0 7B68     		ldr	r3, [r7, #4]
 2088 00f2 5A62     		str	r2, [r3, #36]
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the PLL2 configuration -----------------------------------------------*/
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
ARM GAS  /tmp/ccQKe6VG.s 			page 61


1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2089              		.loc 1 1315 1
 2090 00f4 00BF     		nop
 2091 00f6 0C37     		adds	r7, r7, #12
 2092              	.LCFI45:
 2093              		.cfi_def_cfa_offset 4
 2094 00f8 BD46     		mov	sp, r7
 2095              	.LCFI46:
 2096              		.cfi_def_cfa_register 13
 2097              		@ sp needed
 2098 00fa 80BC     		pop	{r7}
 2099              	.LCFI47:
 2100              		.cfi_restore 7
 2101              		.cfi_def_cfa_offset 0
 2102 00fc 7047     		bx	lr
 2103              	.L143:
 2104 00fe 00BF     		.align	2
 2105              	.L142:
 2106 0100 00100240 		.word	1073876992
 2107              		.cfi_endproc
 2108              	.LFE76:
 2110              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 2111              		.align	1
 2112              		.global	HAL_RCC_GetClockConfig
 2113              		.syntax unified
 2114              		.thumb
 2115              		.thumb_func
 2116              		.fpu softvfp
 2118              	HAL_RCC_GetClockConfig:
 2119              	.LFB77:
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Get the RCC_ClkInitStruct according to the internal 
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that 
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * contains the current clock configuration.
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2120              		.loc 1 1326 1
 2121              		.cfi_startproc
 2122              		@ args = 0, pretend = 0, frame = 8
 2123              		@ frame_needed = 1, uses_anonymous_args = 0
 2124              		@ link register save eliminated.
 2125 0000 80B4     		push	{r7}
 2126              	.LCFI48:
 2127              		.cfi_def_cfa_offset 4
 2128              		.cfi_offset 7, -4
 2129 0002 83B0     		sub	sp, sp, #12
 2130              	.LCFI49:
 2131              		.cfi_def_cfa_offset 16
 2132 0004 00AF     		add	r7, sp, #0
 2133              	.LCFI50:
 2134              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccQKe6VG.s 			page 62


 2135 0006 7860     		str	r0, [r7, #4]
 2136 0008 3960     		str	r1, [r7]
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(pFLatency != NULL);
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 2137              		.loc 1 1332 32
 2138 000a 7B68     		ldr	r3, [r7, #4]
 2139 000c 0F22     		movs	r2, #15
 2140 000e 1A60     		str	r2, [r3]
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2141              		.loc 1 1335 51
 2142 0010 114B     		ldr	r3, .L145
 2143 0012 5B68     		ldr	r3, [r3, #4]
 2144              		.loc 1 1335 37
 2145 0014 03F00302 		and	r2, r3, #3
 2146              		.loc 1 1335 35
 2147 0018 7B68     		ldr	r3, [r7, #4]
 2148 001a 5A60     		str	r2, [r3, #4]
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 2149              		.loc 1 1338 52
 2150 001c 0E4B     		ldr	r3, .L145
 2151 001e 5B68     		ldr	r3, [r3, #4]
 2152              		.loc 1 1338 38
 2153 0020 03F0F002 		and	r2, r3, #240
 2154              		.loc 1 1338 36
 2155 0024 7B68     		ldr	r3, [r7, #4]
 2156 0026 9A60     		str	r2, [r3, #8]
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 2157              		.loc 1 1341 53
 2158 0028 0B4B     		ldr	r3, .L145
 2159 002a 5B68     		ldr	r3, [r3, #4]
 2160              		.loc 1 1341 39
 2161 002c 03F4E062 		and	r2, r3, #1792
 2162              		.loc 1 1341 37
 2163 0030 7B68     		ldr	r3, [r7, #4]
 2164 0032 DA60     		str	r2, [r3, #12]
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 2165              		.loc 1 1344 54
 2166 0034 084B     		ldr	r3, .L145
 2167 0036 5B68     		ldr	r3, [r3, #4]
 2168              		.loc 1 1344 39
 2169 0038 DB08     		lsrs	r3, r3, #3
 2170 003a 03F4E062 		and	r2, r3, #1792
 2171              		.loc 1 1344 37
 2172 003e 7B68     		ldr	r3, [r7, #4]
 2173 0040 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/ccQKe6VG.s 			page 63


1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if   defined(FLASH_ACR_LATENCY)
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 2174              		.loc 1 1348 32
 2175 0042 064B     		ldr	r3, .L145+4
 2176 0044 1B68     		ldr	r3, [r3]
 2177              		.loc 1 1348 16
 2178 0046 03F00702 		and	r2, r3, #7
 2179              		.loc 1 1348 14
 2180 004a 3B68     		ldr	r3, [r7]
 2181 004c 1A60     		str	r2, [r3]
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* For VALUE lines devices, only LATENCY_0 can be set*/
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)FLASH_LATENCY_0; 
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2182              		.loc 1 1353 1
 2183 004e 00BF     		nop
 2184 0050 0C37     		adds	r7, r7, #12
 2185              	.LCFI51:
 2186              		.cfi_def_cfa_offset 4
 2187 0052 BD46     		mov	sp, r7
 2188              	.LCFI52:
 2189              		.cfi_def_cfa_register 13
 2190              		@ sp needed
 2191 0054 80BC     		pop	{r7}
 2192              	.LCFI53:
 2193              		.cfi_restore 7
 2194              		.cfi_def_cfa_offset 0
 2195 0056 7047     		bx	lr
 2196              	.L146:
 2197              		.align	2
 2198              	.L145:
 2199 0058 00100240 		.word	1073876992
 2200 005c 00200240 		.word	1073881088
 2201              		.cfi_endproc
 2202              	.LFE77:
 2204              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2205              		.align	1
 2206              		.global	HAL_RCC_NMI_IRQHandler
 2207              		.syntax unified
 2208              		.thumb
 2209              		.thumb_func
 2210              		.fpu softvfp
 2212              	HAL_RCC_NMI_IRQHandler:
 2213              	.LFB78:
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2214              		.loc 1 1361 1
 2215              		.cfi_startproc
ARM GAS  /tmp/ccQKe6VG.s 			page 64


 2216              		@ args = 0, pretend = 0, frame = 0
 2217              		@ frame_needed = 1, uses_anonymous_args = 0
 2218 0000 80B5     		push	{r7, lr}
 2219              	.LCFI54:
 2220              		.cfi_def_cfa_offset 8
 2221              		.cfi_offset 7, -8
 2222              		.cfi_offset 14, -4
 2223 0002 00AF     		add	r7, sp, #0
 2224              	.LCFI55:
 2225              		.cfi_def_cfa_register 7
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2226              		.loc 1 1363 6
 2227 0004 064B     		ldr	r3, .L150
 2228 0006 9B68     		ldr	r3, [r3, #8]
 2229 0008 03F08003 		and	r3, r3, #128
 2230              		.loc 1 1363 5
 2231 000c 802B     		cmp	r3, #128
 2232 000e 04D1     		bne	.L149
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2233              		.loc 1 1366 5
 2234 0010 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2235              		.loc 1 1369 5
 2236 0014 034B     		ldr	r3, .L150+4
 2237 0016 8022     		movs	r2, #128
 2238 0018 1A70     		strb	r2, [r3]
 2239              	.L149:
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2240              		.loc 1 1371 1
 2241 001a 00BF     		nop
 2242 001c 80BD     		pop	{r7, pc}
 2243              	.L151:
 2244 001e 00BF     		.align	2
 2245              	.L150:
 2246 0020 00100240 		.word	1073876992
 2247 0024 0A100240 		.word	1073877002
 2248              		.cfi_endproc
 2249              	.LFE78:
 2251              		.section	.text.RCC_Delay,"ax",%progbits
 2252              		.align	1
 2253              		.syntax unified
 2254              		.thumb
 2255              		.thumb_func
 2256              		.fpu softvfp
 2258              	RCC_Delay:
 2259              	.LFB79:
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  mdelay: specifies the delay time length, in milliseconds.
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
ARM GAS  /tmp/ccQKe6VG.s 			page 65


1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay)
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2260              		.loc 1 1379 1
 2261              		.cfi_startproc
 2262              		@ args = 0, pretend = 0, frame = 16
 2263              		@ frame_needed = 1, uses_anonymous_args = 0
 2264              		@ link register save eliminated.
 2265 0000 80B4     		push	{r7}
 2266              	.LCFI56:
 2267              		.cfi_def_cfa_offset 4
 2268              		.cfi_offset 7, -4
 2269 0002 85B0     		sub	sp, sp, #20
 2270              	.LCFI57:
 2271              		.cfi_def_cfa_offset 24
 2272 0004 00AF     		add	r7, sp, #0
 2273              	.LCFI58:
 2274              		.cfi_def_cfa_register 7
 2275 0006 7860     		str	r0, [r7, #4]
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 2276              		.loc 1 1380 56
 2277 0008 0A4B     		ldr	r3, .L154
 2278 000a 1B68     		ldr	r3, [r3]
 2279 000c 0A4A     		ldr	r2, .L154+4
 2280 000e A2FB0323 		umull	r2, r3, r2, r3
 2281 0012 5B0A     		lsrs	r3, r3, #9
 2282              		.loc 1 1380 32
 2283 0014 7A68     		ldr	r2, [r7, #4]
 2284 0016 02FB03F3 		mul	r3, r2, r3
 2285              		.loc 1 1380 17
 2286 001a FB60     		str	r3, [r7, #12]
 2287              	.L153:
 2288              	.LBB7:
 2289              	.LBB8:
 2290              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  /tmp/ccQKe6VG.s 			page 66


  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccQKe6VG.s 			page 67


  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccQKe6VG.s 			page 68


 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccQKe6VG.s 			page 69


 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccQKe6VG.s 			page 70


 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
ARM GAS  /tmp/ccQKe6VG.s 			page 71


 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccQKe6VG.s 			page 72


 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 2291              		.loc 2 375 3 discriminator 1
 2292              		.syntax unified
 2293              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2294 001c 00BF     		nop
 2295              	@ 0 "" 2
 2296              		.thumb
 2297              		.syntax unified
 2298              	.LBE8:
 2299              	.LBE7:
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   do 
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __NOP();
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   } 
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (Delay --);
 2300              		.loc 1 1385 16 discriminator 1
 2301 001e FB68     		ldr	r3, [r7, #12]
 2302 0020 5A1E     		subs	r2, r3, #1
 2303 0022 FA60     		str	r2, [r7, #12]
 2304              		.loc 1 1385 3 discriminator 1
 2305 0024 002B     		cmp	r3, #0
 2306 0026 F9D1     		bne	.L153
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2307              		.loc 1 1386 1
 2308 0028 00BF     		nop
 2309 002a 1437     		adds	r7, r7, #20
 2310              	.LCFI59:
 2311              		.cfi_def_cfa_offset 4
 2312 002c BD46     		mov	sp, r7
 2313              	.LCFI60:
 2314              		.cfi_def_cfa_register 13
 2315              		@ sp needed
 2316 002e 80BC     		pop	{r7}
 2317              	.LCFI61:
 2318              		.cfi_restore 7
 2319              		.cfi_def_cfa_offset 0
 2320 0030 7047     		bx	lr
 2321              	.L155:
 2322 0032 00BF     		.align	2
 2323              	.L154:
 2324 0034 00000000 		.word	SystemCoreClock
 2325 0038 D34D6210 		.word	274877907
 2326              		.cfi_endproc
 2327              	.LFE79:
 2329              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2330              		.align	1
 2331              		.weak	HAL_RCC_CSSCallback
ARM GAS  /tmp/ccQKe6VG.s 			page 73


 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu softvfp
 2337              	HAL_RCC_CSSCallback:
 2338              	.LFB80:
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval none
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2339              		.loc 1 1393 1
 2340              		.cfi_startproc
 2341              		@ args = 0, pretend = 0, frame = 0
 2342              		@ frame_needed = 1, uses_anonymous_args = 0
 2343              		@ link register save eliminated.
 2344 0000 80B4     		push	{r7}
 2345              	.LCFI62:
 2346              		.cfi_def_cfa_offset 4
 2347              		.cfi_offset 7, -4
 2348 0002 00AF     		add	r7, sp, #0
 2349              	.LCFI63:
 2350              		.cfi_def_cfa_register 7
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     the HAL_RCC_CSSCallback could be implemented in the user file
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     */ 
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2351              		.loc 1 1397 1
 2352 0004 00BF     		nop
 2353 0006 BD46     		mov	sp, r7
 2354              	.LCFI64:
 2355              		.cfi_def_cfa_register 13
 2356              		@ sp needed
 2357 0008 80BC     		pop	{r7}
 2358              	.LCFI65:
 2359              		.cfi_restore 7
 2360              		.cfi_def_cfa_offset 0
 2361 000a 7047     		bx	lr
 2362              		.cfi_endproc
 2363              	.LFE80:
 2365              		.text
 2366              	.Letext0:
 2367              		.file 3 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine/_default_types.h"
 2368              		.file 4 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2369              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 2370              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2371              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 2372              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2373              		.file 9 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/lock.h"
 2374              		.file 10 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_types.h"
 2375              		.file 11 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/include/stddef.h"
 2376              		.file 12 "/mnt/d/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/reent.h"
 2377              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2378              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2379              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
ARM GAS  /tmp/ccQKe6VG.s 			page 74


 2380              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2381              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccQKe6VG.s 			page 75


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_rcc.c
     /tmp/ccQKe6VG.s:16     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccQKe6VG.s:24     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccQKe6VG.s:227    .text.HAL_RCC_DeInit:0000000000000120 $d
     /tmp/ccQKe6VG.s:234    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccQKe6VG.s:241    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccQKe6VG.s:2258   .text.RCC_Delay:0000000000000000 RCC_Delay
     /tmp/ccQKe6VG.s:648    .text.HAL_RCC_OscConfig:0000000000000264 $d
     /tmp/ccQKe6VG.s:653    .text.HAL_RCC_OscConfig:0000000000000270 $t
     /tmp/ccQKe6VG.s:1033   .text.HAL_RCC_OscConfig:00000000000004bc $d
     /tmp/ccQKe6VG.s:1040   .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccQKe6VG.s:1047   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccQKe6VG.s:1620   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccQKe6VG.s:1401   .text.HAL_RCC_ClockConfig:0000000000000208 $d
     /tmp/ccQKe6VG.s:1409   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccQKe6VG.s:1416   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccQKe6VG.s:1494   .text.HAL_RCC_MCOConfig:0000000000000068 $d
     /tmp/ccQKe6VG.s:1500   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccQKe6VG.s:1507   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccQKe6VG.s:1540   .text.HAL_RCC_EnableCSS:0000000000000014 $d
     /tmp/ccQKe6VG.s:1545   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccQKe6VG.s:1552   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccQKe6VG.s:1585   .text.HAL_RCC_DisableCSS:0000000000000014 $d
     /tmp/ccQKe6VG.s:1590   .rodata:0000000000000000 $d
     /tmp/ccQKe6VG.s:1613   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccQKe6VG.s:1759   .text.HAL_RCC_GetSysClockFreq:00000000000000b0 $d
     /tmp/ccQKe6VG.s:1768   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccQKe6VG.s:1775   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccQKe6VG.s:1806   .text.HAL_RCC_GetHCLKFreq:0000000000000010 $d
     /tmp/ccQKe6VG.s:1811   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccQKe6VG.s:1818   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccQKe6VG.s:1852   .text.HAL_RCC_GetPCLK1Freq:0000000000000020 $d
     /tmp/ccQKe6VG.s:1858   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccQKe6VG.s:1865   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccQKe6VG.s:1899   .text.HAL_RCC_GetPCLK2Freq:0000000000000020 $d
     /tmp/ccQKe6VG.s:1905   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccQKe6VG.s:1912   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccQKe6VG.s:2106   .text.HAL_RCC_GetOscConfig:0000000000000100 $d
     /tmp/ccQKe6VG.s:2111   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccQKe6VG.s:2118   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccQKe6VG.s:2199   .text.HAL_RCC_GetClockConfig:0000000000000058 $d
     /tmp/ccQKe6VG.s:2205   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccQKe6VG.s:2212   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccQKe6VG.s:2337   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/ccQKe6VG.s:2246   .text.HAL_RCC_NMI_IRQHandler:0000000000000020 $d
     /tmp/ccQKe6VG.s:2252   .text.RCC_Delay:0000000000000000 $t
     /tmp/ccQKe6VG.s:2324   .text.RCC_Delay:0000000000000034 $d
     /tmp/ccQKe6VG.s:2330   .text.HAL_RCC_CSSCallback:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
AHBPrescTable
HAL_GPIO_Init
APBPrescTable
ARM GAS  /tmp/ccQKe6VG.s 			page 76


